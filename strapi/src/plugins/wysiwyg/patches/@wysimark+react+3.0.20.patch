diff --git a/node_modules/@wysimark/react/.dist/browser/index.esm.js b/node_modules/@wysimark/react/.dist/browser/index.esm.js
index 46d1f77..185a61a 100644
--- a/node_modules/@wysimark/react/.dist/browser/index.esm.js
+++ b/node_modules/@wysimark/react/.dist/browser/index.esm.js
@@ -6314,7 +6314,16 @@ function deleteFragmentWithProtectedTypes(editor, protectedTypes) {
   );
   Editor44.withoutNormalizing(editor, () => {
     for (const range of reversedRanges) {
-      Transforms30.delete(editor, { at: range });
+      const tableContentNodes = Editor.nodes(editor, {
+        at: range.anchor.path, 
+        // mode defaults to "all", so this also searches the Editor's children
+        match: (node) => {return (node.type === 'table-content')},
+      })
+
+      for (const tableContentNode of tableContentNodes) {
+        Transforms.select(editor, tableContentNode[1])
+        Editor.insertFragment(editor, [{ text: "" }])
+      }
     }
     Transforms30.collapse(editor, { edge: "start" });
   });
@@ -6385,7 +6394,11 @@ function insertColumn(editor, { offset = 0, at = editor.selection } = {}) {
   Editor45.withoutNormalizing(editor, () => {
     const { columns } = tableElement;
     const nextColumns = [...columns];
-    nextColumns.splice(nextCellIndex, 0, columns[nextCellIndex]);
+    if (nextCellIndex < columns.length) {
+      nextColumns.splice(nextCellIndex, 0, columns[nextCellIndex]);
+    } else {
+      nextColumns.push({ align: 'left' });
+    }
     Transforms31.setNodes(editor, { columns: nextColumns }, { at: tablePath });
     tableElement.children.forEach((rowElement, i) => {
       Transforms31.insertNodes(editor, createCell(nextCellIndex), {
@@ -7563,12 +7576,12 @@ var Emoji = () => /* @__PURE__ */ jsxs27(TablerIcon, { children: [
 
 // src/toolbar-plugin/items/block-items.tsx
 var blockItems = [
-  {
-    icon: H1,
-    title: "Heading 1",
-    hotkey: "super+1",
-    action: (editor) => editor.heading.convertHeading(1, false)
-  },
+  // {
+  //   icon: H1,
+  //   title: "Heading 1",
+  //   hotkey: "super+1",
+  //   action: (editor) => editor.heading.convertHeading(1, false)
+  // },
   {
     icon: H2,
     title: "Heading 2",
@@ -7800,26 +7813,26 @@ var dialogItems = [
     more: true,
     Component: TableDialog
   },
-  {
-    icon: Image,
-    title: "Insert Image",
-    more: true,
-    Component: ImageDialog,
-    show: (editor) => editor.toolbar.showUploadButtons ?? false
-  },
-  {
-    icon: Attachment,
-    title: "Insert Attachment",
-    more: true,
-    Component: AttachmentDialog,
-    show: (editor) => editor.toolbar.showUploadButtons ?? false
-  },
-  {
-    icon: Emoji,
-    title: "Insert Emoji",
-    more: true,
-    Component: EmojiDialog
-  }
+  // {
+  //   icon: Image,
+  //   title: "Insert Image",
+  //   more: true,
+  //   Component: ImageDialog,
+  //   show: (editor) => editor.toolbar.showUploadButtons ?? false
+  // },
+  // {
+  //   icon: Attachment,
+  //   title: "Insert Attachment",
+  //   more: true,
+  //   Component: AttachmentDialog,
+  //   show: (editor) => editor.toolbar.showUploadButtons ?? false
+  // },
+  // {
+  //   icon: Emoji,
+  //   title: "Insert Emoji",
+  //   more: true,
+  //   Component: EmojiDialog
+  // }
 ];
 var expandedDialogItems = dialogItems;
 var compactDialogItems = [
@@ -7883,13 +7896,13 @@ var listItems = [
     title: "Numbered List",
     hotkey: "super+7",
     action: (editor) => editor.list.convertOrderedList(false)
-  },
-  {
-    icon: ListCheck,
-    title: "Checklist",
-    hotkey: "super+9",
-    action: (editor) => editor.list.convertTaskList(false)
   }
+  // {
+  //   icon: ListCheck,
+  //   title: "Checklist",
+  //   hotkey: "super+9",
+  //   action: (editor) => editor.list.convertTaskList(false)
+  // }
 ];
 
 // src/toolbar-plugin/items/quote-items.tsx
@@ -7921,13 +7934,13 @@ var dropdownItems = [
     title: "Block Quote",
     more: true,
     children: quoteItems
-  },
-  {
-    icon: Code,
-    title: "Code Block",
-    more: true,
-    children: codeBlockItems
   }
+  // {
+  //   icon: Code,
+  //   title: "Code Block",
+  //   more: true,
+  //   children: codeBlockItems
+  // }
 ];
 
 // src/toolbar-plugin/components/dialog/anchor-dialog.tsx
@@ -8048,13 +8061,13 @@ var secondaryMarkItems = [
     action: (editor) => editor.marksPlugin.toggleStrike()
   },
   "divider",
-  {
-    icon: Code,
-    title: "Inline Code",
-    hotkey: "mod+j",
-    action: (editor) => editor.inlineCode.toggleInlineCode()
-  },
-  "divider",
+  // {
+  //   icon: Code,
+  //   title: "Inline Code",
+  //   hotkey: "mod+j",
+  //   action: (editor) => editor.inlineCode.toggleInlineCode()
+  // },
+  // "divider",
   {
     icon: RemoveStyles,
     title: "Remove Styles",
@@ -8594,6 +8607,32 @@ var PasteMarkdownPlugin = createPlugin(
       editableProps: {
         onPaste(e) {
           const { types } = e.clipboardData;
+          const clipboardText = JSON.stringify(e.clipboardData.getData("text"));
+          // Pasting a table
+          // TODO: Crash on pasting table from Excel
+          // TODO: Crash on deleting table when selection begins outside table and ends inside the last cell 
+          if (clipboardText.includes("\\t")) {
+            const parsedTableRows = clipboardText.replaceAll(/(^")|("$)/g,"").replaceAll("\\r\\n", "\\r").split("\\r");
+            const parsedTable = parsedTableRows.map((row) => row.split("\\t"));
+            const rowCount = parsedTable?.length ?? 0;
+            const columnCount = parsedTable[0]?.length ?? 0;
+
+            insertTable(editor, columnCount, rowCount);
+            const tableCellNodes = Editor.nodes(editor, {
+              at: editor.tablePlugin.getTableInfo().tablePath, 
+              match: (node) => {return (node.type === 'table-cell')},
+            })
+
+            for (const node of tableCellNodes) {
+              const nodePath = node[1]
+              const nodeRowIndex = nodePath[1]
+              const nodeColumnIndex = nodePath[2]
+              Transforms46.select(editor, nodePath)
+              Editor59.insertFragment(editor, [{ text: parsedTable[nodeRowIndex][nodeColumnIndex] }])
+            }
+            stopEvent(e);
+            return true
+          }
           if (types.length !== 1 || types[0] !== "text/plain") {
             return false;
           }
