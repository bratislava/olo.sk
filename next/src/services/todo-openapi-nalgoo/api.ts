/* tslint:disable */
/* eslint-disable */
/**
 * ATS API (Nalgoo)
 * Import and export REST API for Nalgoo\'s ATS
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CodeListDetail
 */
export interface CodeListDetail {
    /**
     * Identificator
     * @type {number}
     * @memberof CodeListDetail
     */
    'id': number;
    /**
     * Default name
     * @type {string}
     * @memberof CodeListDetail
     */
    'name': string;
    /**
     * All available translations for this item in format [ISO 639-1 language code => translation]
     * @type {{ [key: string]: string; }}
     * @memberof CodeListDetail
     */
    'translations': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface CodeListItem
 */
export interface CodeListItem {
    /**
     * Identificator
     * @type {number}
     * @memberof CodeListItem
     */
    'id': number;
    /**
     * Name
     * @type {string}
     * @memberof CodeListItem
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Status of operation, will be \"error\"
     * @type {string}
     * @memberof ErrorResponse
     */
    'status': string;
    /**
     * Operation status code, see HTTP status codes (4xx - client error, 5xx - server error)
     * @type {number}
     * @memberof ErrorResponse
     */
    'code': number;
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ExtendedErrorResponse
 */
export interface ExtendedErrorResponse {
    /**
     * Status of operation, will be \"error\"
     * @type {string}
     * @memberof ExtendedErrorResponse
     */
    'status': string;
    /**
     * Operation status code, see HTTP status codes (4xx - client error, 5xx - server error)
     * @type {number}
     * @memberof ExtendedErrorResponse
     */
    'code': number;
    /**
     * Error message
     * @type {string}
     * @memberof ExtendedErrorResponse
     */
    'message': string;
    /**
     * List of fields with error (if applicable)
     * @type {Array<string>}
     * @memberof ExtendedErrorResponse
     */
    'fields': Array<string>;
}
/**
 * 
 * @export
 * @interface JobOfferDetail
 */
export interface JobOfferDetail {
    /**
     * Name of position
     * @type {string}
     * @memberof JobOfferDetail
     */
    'name'?: string;
    /**
     * Url with apply-to-position form
     * @type {string}
     * @memberof JobOfferDetail
     */
    'apply_url'?: string;
    /**
     * Summary of benefits (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'benefit'?: string;
    /**
     * Company name
     * @type {string}
     * @memberof JobOfferDetail
     */
    'company'?: string;
    /**
     * Description of company (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'company_description'?: string;
    /**
     * Industry sectors of company (either array of ids, or array of \"sector\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'company_sectors'?: Array<CodeListItem>;
    /**
     * Date of start (either date or string \"asap\" or \"agreement\")
     * @type {string}
     * @memberof JobOfferDetail
     */
    'date_start'?: string;
    /**
     * Date of job offer expiration
     * @type {string}
     * @memberof JobOfferDetail
     */
    'date_expiration'?: string;
    /**
     * Forms of employment (either array of ids, or array of \"employmentForm\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'employment_forms'?: Array<CodeListItem>;
    /**
     * Business Unit (either array of ids, or array of \"businessUnit\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'business_unit'?: Array<CodeListItem>;
    /**
     * If position is suitable for graduates
     * @type {boolean}
     * @memberof JobOfferDetail
     */
    'graduate'?: boolean;
    /**
     * Information about selection process (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'interview'?: string;
    /**
     * Summary of responsibilities (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'job_note'?: string;
    /**
     * ISO 639-1 language code of job offer
     * @type {string}
     * @memberof JobOfferDetail
     */
    'lang'?: string;
    /**
     * 
     * @type {CodeListItem}
     * @memberof JobOfferDetail
     */
    'min_education'?: CodeListItem;
    /**
     * Personal talents (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'personal_prerequisites'?: string;
    /**
     * Focus (either id or \"position\" CodeListItem object if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'positions'?: Array<CodeListItem>;
    /**
     * Practice (number of years)
     * @type {number}
     * @memberof JobOfferDetail
     */
    'practise'?: number;
    /**
     * Practice in sector
     * @type {string}
     * @memberof JobOfferDetail
     */
    'practise_sector'?: string;
    /**
     * Information about work location (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'region_description'?: string;
    /**
     * Work location (either array of ids or array of \"region\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'regions'?: Array<CodeListItem>;
    /**
     * Deprecated, use the `salary_type` property instead.
     * @type {number}
     * @memberof JobOfferDetail
     */
    'salary'?: number;
    /**
     * Required skills
     * @type {Array<Skill>}
     * @memberof JobOfferDetail
     */
    'skills'?: Array<Skill>;
    /**
     * Educational Specialization (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'specialization'?: string;
    /**
     * Other requirements (HTML)
     * @type {string}
     * @memberof JobOfferDetail
     */
    'other_requirements'?: string;
    /**
     * 
     * @type {CodeListItem}
     * @memberof JobOfferDetail
     */
    'workMode'?: CodeListItem;
    /**
     * Required education levels (either array of ids, or array of \"education\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferDetail
     */
    'educations'?: Array<CodeListItem>;
    /**
     * Deprecated, use the `salary_type` property instead.
     * @type {string}
     * @memberof JobOfferDetail
     */
    'salary_period'?: JobOfferDetailSalaryPeriodEnum;
    /**
     * Deprecated, use the `salary_type` property instead.
     * @type {number}
     * @memberof JobOfferDetail
     */
    'salary_to'?: number;
    /**
     * Custom text for salary
     * @type {string}
     * @memberof JobOfferDetail
     */
    'salary_text'?: string;
    /**
     * Deprecated, use the `salary_type` property instead.
     * @type {string}
     * @memberof JobOfferDetail
     */
    'formatedSalary'?: string;
    /**
     * 
     * @type {UserConsultant}
     * @memberof JobOfferDetail
     */
    'user_consultant'?: UserConsultant;
    /**
     * Date of publishing
     * @type {string}
     * @memberof JobOfferDetail
     */
    'published_on'?: string;
    /**
     * Date of last update
     * @type {string}
     * @memberof JobOfferDetail
     */
    'updated_on'?: string;
    /**
     * URL to Youtube video
     * @type {string}
     * @memberof JobOfferDetail
     */
    'media'?: string;
    /**
     * Priority of JobOffer, lowest priority should appear first
     * @type {number}
     * @memberof JobOfferDetail
     */
    'priority'?: number;
}

export const JobOfferDetailSalaryPeriodEnum = {
    H: 'h',
    D: 'd',
    W: 'w',
    M: 'm',
    Y: 'y'
} as const;

export type JobOfferDetailSalaryPeriodEnum = typeof JobOfferDetailSalaryPeriodEnum[keyof typeof JobOfferDetailSalaryPeriodEnum];

/**
 * 
 * @export
 * @interface JobOfferListItem
 */
export interface JobOfferListItem {
    /**
     * Identificator of job offer
     * @type {number}
     * @memberof JobOfferListItem
     */
    'id': number;
    /**
     * ISO 639-1 language code of job offer
     * @type {string}
     * @memberof JobOfferListItem
     */
    'lang': string;
    /**
     * Name of position
     * @type {string}
     * @memberof JobOfferListItem
     */
    'name': string;
    /**
     * Regions (either array of ids, or array of \"region\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferListItem
     */
    'regions': Array<CodeListItem>;
    /**
     * Forms of employment (either array of ids, or array of \"employmentForm\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferListItem
     */
    'employment_forms': Array<CodeListItem>;
    /**
     * Industry sectors of company (either array of ids, or array of \"sector\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferListItem
     */
    'company_sectors': Array<CodeListItem>;
    /**
     * Date of start (can be null if not specified, or if it\'s not date)
     * @type {string}
     * @memberof JobOfferListItem
     */
    'date_start'?: string;
    /**
     * Date of start; it can be either date format or string (like \"asap\") or null if not specified
     * @type {string}
     * @memberof JobOfferListItem
     */
    'date_start_formated'?: string;
    /**
     * Date of publishing
     * @type {string}
     * @memberof JobOfferListItem
     */
    'published_on'?: string;
    /**
     * Date of last update
     * @type {string}
     * @memberof JobOfferListItem
     */
    'updated_on'?: string;
    /**
     * Business Unit (either array of ids, or array of \"businessUnit\" CodeListItem objects if expanded)
     * @type {Array<CodeListItem>}
     * @memberof JobOfferListItem
     */
    'business_unit'?: Array<CodeListItem>;
    /**
     * Offered salary
     * @type {string}
     * @memberof JobOfferListItem
     */
    'salary_text'?: string;
    /**
     * Intro text (HTML)
     * @type {string}
     * @memberof JobOfferListItem
     */
    'intro'?: string;
    /**
     * Custom fields
     * @type {object}
     * @memberof JobOfferListItem
     */
    'custom_fields'?: object;
    /**
     * 
     * @type {UserConsultant}
     * @memberof JobOfferListItem
     */
    'user_consultant'?: UserConsultant;
    /**
     * Url with apply-to-position form
     * @type {string}
     * @memberof JobOfferListItem
     */
    'apply_url'?: string;
    /**
     * Priority of JobOffer, lowest priority should appear first
     * @type {number}
     * @memberof JobOfferListItem
     */
    'priority'?: number;
}
/**
 * 
 * @export
 * @interface Skill
 */
export interface Skill {
    /**
     * CodeListItem id (either id or name)
     * @type {number}
     * @memberof Skill
     */
    'id'?: number;
    /**
     * Name (either name or id)
     * @type {string}
     * @memberof Skill
     */
    'name'?: string;
    /**
     * Level (as number between 1 and 5)
     * @type {number}
     * @memberof Skill
     */
    'level': number;
    /**
     * Level (as string)
     * @type {string}
     * @memberof Skill
     */
    'level_text'?: string;
}
/**
 * 
 * @export
 * @interface UserConsultant
 */
export interface UserConsultant {
    /**
     * Title before name
     * @type {string}
     * @memberof UserConsultant
     */
    'title_prefix'?: string;
    /**
     * Firstname
     * @type {string}
     * @memberof UserConsultant
     */
    'firstname': string;
    /**
     * Lastname
     * @type {string}
     * @memberof UserConsultant
     */
    'lastname': string;
    /**
     * Title after name
     * @type {string}
     * @memberof UserConsultant
     */
    'title_suffix'?: string;
    /**
     * Consultan\'t position
     * @type {string}
     * @memberof UserConsultant
     */
    'position'?: string;
    /**
     * Contact phone
     * @type {string}
     * @memberof UserConsultant
     */
    'phone'?: string;
    /**
     * Contact email address
     * @type {string}
     * @memberof UserConsultant
     */
    'email'?: string;
}

/**
 * CodeListApi - axios parameter creator
 * @export
 */
export const CodeListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of items from Code list
         * @param {CodeListNameGetNameEnum} name Name of Code list
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeListNameGet: async (name: CodeListNameGetNameEnum, customer?: number, lang?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('codeListNameGet', 'name', name)
            const localVarPath = `/code-list/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get item details from Code list
         * @param {CodeListNameIdGetNameEnum} name Name of Code list
         * @param {number} id Id of Code list item
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeListNameIdGet: async (name: CodeListNameIdGetNameEnum, id: number, customer?: number, lang?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('codeListNameIdGet', 'name', name)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('codeListNameIdGet', 'id', id)
            const localVarPath = `/code-list/{name}/{id}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodeListApi - functional programming interface
 * @export
 */
export const CodeListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodeListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of items from Code list
         * @param {CodeListNameGetNameEnum} name Name of Code list
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeListNameGet(name: CodeListNameGetNameEnum, customer?: number, lang?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CodeListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeListNameGet(name, customer, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CodeListApi.codeListNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get item details from Code list
         * @param {CodeListNameIdGetNameEnum} name Name of Code list
         * @param {number} id Id of Code list item
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeListNameIdGet(name: CodeListNameIdGetNameEnum, id: number, customer?: number, lang?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeListDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeListNameIdGet(name, id, customer, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CodeListApi.codeListNameIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CodeListApi - factory interface
 * @export
 */
export const CodeListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodeListApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of items from Code list
         * @param {CodeListNameGetNameEnum} name Name of Code list
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeListNameGet(name: CodeListNameGetNameEnum, customer?: number, lang?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CodeListItem>> {
            return localVarFp.codeListNameGet(name, customer, lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get item details from Code list
         * @param {CodeListNameIdGetNameEnum} name Name of Code list
         * @param {number} id Id of Code list item
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [lang] ISO 639-1 language code of main translation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeListNameIdGet(name: CodeListNameIdGetNameEnum, id: number, customer?: number, lang?: string, options?: RawAxiosRequestConfig): AxiosPromise<CodeListDetail> {
            return localVarFp.codeListNameIdGet(name, id, customer, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodeListApi - object-oriented interface
 * @export
 * @class CodeListApi
 * @extends {BaseAPI}
 */
export class CodeListApi extends BaseAPI {
    /**
     * 
     * @summary Get list of items from Code list
     * @param {CodeListNameGetNameEnum} name Name of Code list
     * @param {number} [customer] Customer Id (leave empty if not sure)
     * @param {string} [lang] ISO 639-1 language code of main translation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeListApi
     */
    public codeListNameGet(name: CodeListNameGetNameEnum, customer?: number, lang?: string, options?: RawAxiosRequestConfig) {
        return CodeListApiFp(this.configuration).codeListNameGet(name, customer, lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get item details from Code list
     * @param {CodeListNameIdGetNameEnum} name Name of Code list
     * @param {number} id Id of Code list item
     * @param {number} [customer] Customer Id (leave empty if not sure)
     * @param {string} [lang] ISO 639-1 language code of main translation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeListApi
     */
    public codeListNameIdGet(name: CodeListNameIdGetNameEnum, id: number, customer?: number, lang?: string, options?: RawAxiosRequestConfig) {
        return CodeListApiFp(this.configuration).codeListNameIdGet(name, id, customer, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CodeListNameGetNameEnum = {
    Sector: 'sector',
    EmploymentForm: 'employmentForm',
    Region: 'region',
    Position: 'position',
    Skill: 'skill',
    Education: 'education',
    WorkMode: 'workMode',
    PositionType: 'positionType'
} as const;
export type CodeListNameGetNameEnum = typeof CodeListNameGetNameEnum[keyof typeof CodeListNameGetNameEnum];
/**
 * @export
 */
export const CodeListNameIdGetNameEnum = {
    Sector: 'sector',
    EmploymentForm: 'employmentForm',
    Region: 'region',
    Position: 'position',
    Skill: 'skill',
    Education: 'education',
    WorkMode: 'workMode',
    PositionType: 'positionType'
} as const;
export type CodeListNameIdGetNameEnum = typeof CodeListNameIdGetNameEnum[keyof typeof CodeListNameIdGetNameEnum];


/**
 * JobOfferApi - axios parameter creator
 * @export
 */
export const JobOfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of active job offers
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobOfferGet: async (customer?: number, channel?: string, expand?: Array<JobOfferGetExpandEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get full details of job offer specified by id
         * @param {number} id Id of job offer
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferIdGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobOfferIdGet: async (id: number, customer?: number, channel?: string, expand?: Array<JobOfferIdGetExpandEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobOfferIdGet', 'id', id)
            const localVarPath = `/job-offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobOfferApi - functional programming interface
 * @export
 */
export const JobOfferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobOfferApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of active job offers
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobOfferGet(customer?: number, channel?: string, expand?: Array<JobOfferGetExpandEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobOfferListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobOfferGet(customer, channel, expand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobOfferApi.jobOfferGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get full details of job offer specified by id
         * @param {number} id Id of job offer
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferIdGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobOfferIdGet(id: number, customer?: number, channel?: string, expand?: Array<JobOfferIdGetExpandEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobOfferIdGet(id, customer, channel, expand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobOfferApi.jobOfferIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobOfferApi - factory interface
 * @export
 */
export const JobOfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobOfferApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of active job offers
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobOfferGet(customer?: number, channel?: string, expand?: Array<JobOfferGetExpandEnum>, options?: RawAxiosRequestConfig): AxiosPromise<Array<JobOfferListItem>> {
            return localVarFp.jobOfferGet(customer, channel, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get full details of job offer specified by id
         * @param {number} id Id of job offer
         * @param {number} [customer] Customer Id (leave empty if not sure)
         * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
         * @param {Array<JobOfferIdGetExpandEnum>} [expand] Expand given objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobOfferIdGet(id: number, customer?: number, channel?: string, expand?: Array<JobOfferIdGetExpandEnum>, options?: RawAxiosRequestConfig): AxiosPromise<JobOfferDetail> {
            return localVarFp.jobOfferIdGet(id, customer, channel, expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobOfferApi - object-oriented interface
 * @export
 * @class JobOfferApi
 * @extends {BaseAPI}
 */
export class JobOfferApi extends BaseAPI {
    /**
     * 
     * @summary Get list of active job offers
     * @param {number} [customer] Customer Id (leave empty if not sure)
     * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
     * @param {Array<JobOfferGetExpandEnum>} [expand] Expand given objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobOfferApi
     */
    public jobOfferGet(customer?: number, channel?: string, expand?: Array<JobOfferGetExpandEnum>, options?: RawAxiosRequestConfig) {
        return JobOfferApiFp(this.configuration).jobOfferGet(customer, channel, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get full details of job offer specified by id
     * @param {number} id Id of job offer
     * @param {number} [customer] Customer Id (leave empty if not sure)
     * @param {string} [channel] Publishing channel (if not specified, default channel will be used)
     * @param {Array<JobOfferIdGetExpandEnum>} [expand] Expand given objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobOfferApi
     */
    public jobOfferIdGet(id: number, customer?: number, channel?: string, expand?: Array<JobOfferIdGetExpandEnum>, options?: RawAxiosRequestConfig) {
        return JobOfferApiFp(this.configuration).jobOfferIdGet(id, customer, channel, expand, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const JobOfferGetExpandEnum = {
    CompanySectors: 'company_sectors',
    Regions: 'regions',
    EmploymentForms: 'employment_forms',
    PositionType: 'position_type',
    BusinessUnit: 'business_unit',
    CustomFields: 'custom_fields'
} as const;
export type JobOfferGetExpandEnum = typeof JobOfferGetExpandEnum[keyof typeof JobOfferGetExpandEnum];
/**
 * @export
 */
export const JobOfferIdGetExpandEnum = {
    CompanySectors: 'company_sectors',
    Regions: 'regions',
    EmploymentForms: 'employment_forms',
    Positions: 'positions',
    MinEducation: 'min_education',
    Educations: 'educations',
    WorkMode: 'workMode',
    PositionType: 'position_type',
    BusinessUnit: 'business_unit',
    CustomFields: 'custom_fields'
} as const;
export type JobOfferIdGetExpandEnum = typeof JobOfferIdGetExpandEnum[keyof typeof JobOfferIdGetExpandEnum];


