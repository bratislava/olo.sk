### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  addedAt: DateTime!
  blocks: JSON
  category: CategoryEntityResponse
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  locale: String
  localizations(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  perex: String
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticleEntity {
  attributes: Article
  id: ID
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleFiltersInput {
  addedAt: DateTimeFilterInput
  and: [ArticleFiltersInput]
  blocks: JSONFilterInput
  category: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ArticleFiltersInput
  not: ArticleFiltersInput
  or: [ArticleFiltersInput]
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleInput {
  addedAt: DateTime
  blocks: JSON
  category: ID
  coverMedia: ID
  perex: String
  publishedAt: DateTime
  slug: String
  title: String
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Branch {
  createdAt: DateTime
  locale: String
  localizations(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  openingTimes(filters: OpeningTimeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OpeningTimeRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BranchEntity {
  attributes: Branch
  id: ID
}

type BranchEntityResponse {
  data: BranchEntity
}

type BranchEntityResponseCollection {
  data: [BranchEntity!]!
  meta: ResponseCollectionMeta!
}

input BranchFiltersInput {
  and: [BranchFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: BranchFiltersInput
  not: BranchFiltersInput
  openingTimes: OpeningTimeFiltersInput
  or: [BranchFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BranchInput {
  openingTimes: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type BranchRelationResponseCollection {
  data: [BranchEntity!]!
}

type Category {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: CategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type CategoryEntity {
  attributes: Category
  id: ID
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  and: [CategoryFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: CategoryFiltersInput
  not: CategoryFiltersInput
  or: [CategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CategoryInput {
  articles: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

type ComponentHeaderSectionsBranchMap {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  id: ID!
}

input ComponentHeaderSectionsBranchMapFiltersInput {
  and: [ComponentHeaderSectionsBranchMapFiltersInput]
  branches: BranchFiltersInput
  not: ComponentHeaderSectionsBranchMapFiltersInput
  or: [ComponentHeaderSectionsBranchMapFiltersInput]
}

input ComponentHeaderSectionsBranchMapInput {
  branches: [ID]
  id: ID
}

type ComponentHeaderSectionsGallery {
  id: ID!
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
}

input ComponentHeaderSectionsGalleryFiltersInput {
  and: [ComponentHeaderSectionsGalleryFiltersInput]
  not: ComponentHeaderSectionsGalleryFiltersInput
  or: [ComponentHeaderSectionsGalleryFiltersInput]
}

input ComponentHeaderSectionsGalleryInput {
  id: ID
  medias: [ID]
}

type ComponentHeaderSectionsImage {
  id: ID!
  media: UploadFileEntityResponse!
}

input ComponentHeaderSectionsImageFiltersInput {
  and: [ComponentHeaderSectionsImageFiltersInput]
  not: ComponentHeaderSectionsImageFiltersInput
  or: [ComponentHeaderSectionsImageFiltersInput]
}

input ComponentHeaderSectionsImageInput {
  id: ID
  media: ID
}

type ComponentItemsColumnsItem {
  id: ID!
  image: UploadFileEntityResponse
  text: String
  title: String
}

input ComponentItemsColumnsItemFiltersInput {
  and: [ComponentItemsColumnsItemFiltersInput]
  not: ComponentItemsColumnsItemFiltersInput
  or: [ComponentItemsColumnsItemFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsColumnsItemInput {
  id: ID
  image: ID
  text: String
  title: String
}

type ComponentItemsLink {
  article: ArticleEntityResponse
  branch: BranchEntityResponse
  document: DocumentEntityResponse
  id: ID!
  label: String
  page: PageEntityResponse
  url: String
}

input ComponentItemsLinkFiltersInput {
  and: [ComponentItemsLinkFiltersInput]
  article: ArticleFiltersInput
  branch: BranchFiltersInput
  document: DocumentFiltersInput
  label: StringFilterInput
  not: ComponentItemsLinkFiltersInput
  or: [ComponentItemsLinkFiltersInput]
  page: PageFiltersInput
  url: StringFilterInput
}

input ComponentItemsLinkInput {
  article: ID
  branch: ID
  document: ID
  id: ID
  label: String
  page: ID
  url: String
}

type ComponentItemsOpeningHoursItem {
  id: ID!
  label: String!
  value: String!
}

input ComponentItemsOpeningHoursItemFiltersInput {
  and: [ComponentItemsOpeningHoursItemFiltersInput]
  label: StringFilterInput
  not: ComponentItemsOpeningHoursItemFiltersInput
  or: [ComponentItemsOpeningHoursItemFiltersInput]
  value: StringFilterInput
}

input ComponentItemsOpeningHoursItemInput {
  id: ID
  label: String
  value: String
}

type ComponentItemsOrderedCardsItem {
  id: ID!
  text: String!
  title: String!
}

input ComponentItemsOrderedCardsItemFiltersInput {
  and: [ComponentItemsOrderedCardsItemFiltersInput]
  not: ComponentItemsOrderedCardsItemFiltersInput
  or: [ComponentItemsOrderedCardsItemFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsOrderedCardsItemInput {
  id: ID
  text: String
  title: String
}

type ComponentItemsSlide {
  backgroundColor: String
  id: ID!
  link: ComponentItemsLink
  media: UploadFileEntityResponse!
  text: String
  title: String!
}

input ComponentItemsSlideFiltersInput {
  and: [ComponentItemsSlideFiltersInput]
  backgroundColor: StringFilterInput
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsSlideFiltersInput
  or: [ComponentItemsSlideFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsSlideInput {
  backgroundColor: String
  id: ID
  link: ComponentItemsLinkInput
  media: ID
  text: String
  title: String
}

type ComponentSectionsColumns {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR!
  id: ID!
  items(filters: ComponentItemsColumnsItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsColumnsItem]!
  text: String
  title: String!
}

input ComponentSectionsColumnsFiltersInput {
  and: [ComponentSectionsColumnsFiltersInput]
  backgroundColor: StringFilterInput
  items: ComponentItemsColumnsItemFiltersInput
  not: ComponentSectionsColumnsFiltersInput
  or: [ComponentSectionsColumnsFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsColumnsInput {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR
  id: ID
  items: [ComponentItemsColumnsItemInput]
  text: String
  title: String
}

type ComponentSectionsImageAndText {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR!
  id: ID!
  image: UploadFileEntityResponse!
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION!
  primaryButton: ComponentItemsLink
  secondaryButton: ComponentItemsLink
  text: String
  title: String!
}

input ComponentSectionsImageAndTextFiltersInput {
  and: [ComponentSectionsImageAndTextFiltersInput]
  backgroundColor: StringFilterInput
  imagePosition: StringFilterInput
  not: ComponentSectionsImageAndTextFiltersInput
  or: [ComponentSectionsImageAndTextFiltersInput]
  primaryButton: ComponentItemsLinkFiltersInput
  secondaryButton: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsImageAndTextInput {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR
  id: ID
  image: ID
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION
  primaryButton: ComponentItemsLinkInput
  secondaryButton: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsImageAndTextOverlapped {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR!
  id: ID!
  image: UploadFileEntityResponse!
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION!
  link: ComponentItemsLink
  text: String
  title: String!
}

input ComponentSectionsImageAndTextOverlappedFiltersInput {
  and: [ComponentSectionsImageAndTextOverlappedFiltersInput]
  backgroundColor: StringFilterInput
  imagePosition: StringFilterInput
  link: ComponentItemsLinkFiltersInput
  not: ComponentSectionsImageAndTextOverlappedFiltersInput
  or: [ComponentSectionsImageAndTextOverlappedFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsImageAndTextOverlappedInput {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR
  id: ID
  image: ID
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION
  link: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsOrderedCards {
  cards(filters: ComponentItemsOrderedCardsItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsOrderedCardsItem]!
  id: ID!
  title: String!
}

input ComponentSectionsOrderedCardsFiltersInput {
  and: [ComponentSectionsOrderedCardsFiltersInput]
  cards: ComponentItemsOrderedCardsItemFiltersInput
  not: ComponentSectionsOrderedCardsFiltersInput
  or: [ComponentSectionsOrderedCardsFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsOrderedCardsInput {
  cards: [ComponentItemsOrderedCardsItemInput]
  id: ID
  title: String
}

type ComponentSectionsRichtext {
  content: JSON
  id: ID!
}

input ComponentSectionsRichtextFiltersInput {
  and: [ComponentSectionsRichtextFiltersInput]
  content: JSONFilterInput
  not: ComponentSectionsRichtextFiltersInput
  or: [ComponentSectionsRichtextFiltersInput]
}

input ComponentSectionsRichtextInput {
  content: JSON
  id: ID
}

type Contact {
  createdAt: DateTime
  label: String!
  publishedAt: DateTime
  updatedAt: DateTime
}

type ContactEntity {
  attributes: Contact
  id: ID
}

type ContactEntityResponse {
  data: ContactEntity
}

type ContactEntityResponseCollection {
  data: [ContactEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactFiltersInput {
  and: [ContactFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  label: StringFilterInput
  not: ContactFiltersInput
  or: [ContactFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ContactInput {
  label: String
  publishedAt: DateTime
}

type ContactRelationResponseCollection {
  data: [ContactEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Document {
  createdAt: DateTime
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  publishedAt: DateTime
  slug: String
  title: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION {
  left
  left_shifted
  right
  right_shifted
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION {
  left
  right
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Article | Branch | Category | ComponentHeaderSectionsBranchMap | ComponentHeaderSectionsGallery | ComponentHeaderSectionsImage | ComponentItemsColumnsItem | ComponentItemsLink | ComponentItemsOpeningHoursItem | ComponentItemsOrderedCardsItem | ComponentItemsSlide | ComponentSectionsColumns | ComponentSectionsImageAndText | ComponentSectionsImageAndTextOverlapped | ComponentSectionsOrderedCards | ComponentSectionsRichtext | Contact | Document | Homepage | I18NLocale | OpeningTime | Page | Tag | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Homepage {
  createdAt: DateTime
  featuredArticles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  locale: String
  localizations: HomepageRelationResponseCollection
  slides(filters: ComponentItemsSlideFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsSlide]
  updatedAt: DateTime
}

type HomepageEntity {
  attributes: Homepage
  id: ID
}

type HomepageEntityResponse {
  data: HomepageEntity
}

type HomepageEntityResponseCollection {
  data: [HomepageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomepageFiltersInput {
  and: [HomepageFiltersInput]
  createdAt: DateTimeFilterInput
  featuredArticles: ArticleFiltersInput
  locale: StringFilterInput
  localizations: HomepageFiltersInput
  not: HomepageFiltersInput
  or: [HomepageFiltersInput]
  slides: ComponentItemsSlideFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomepageInput {
  featuredArticles: [ID]
  slides: [ComponentItemsSlideInput]
}

type HomepageRelationResponseCollection {
  data: [HomepageEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createArticle(data: ArticleInput!, locale: I18NLocaleCode): ArticleEntityResponse
  createArticleLocalization(data: ArticleInput, id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  createBranch(data: BranchInput!, locale: I18NLocaleCode): BranchEntityResponse
  createBranchLocalization(data: BranchInput, id: ID, locale: I18NLocaleCode): BranchEntityResponse
  createCategory(data: CategoryInput!, locale: I18NLocaleCode): CategoryEntityResponse
  createCategoryLocalization(data: CategoryInput, id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  createContact(data: ContactInput!): ContactEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createHomepageLocalization(data: HomepageInput, id: ID, locale: I18NLocaleCode): HomepageEntityResponse
  createOpeningTime(data: OpeningTimeInput!): OpeningTimeEntityResponse
  createPage(data: PageInput!): PageEntityResponse
  createTag(data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  createTagLocalization(data: TagInput, id: ID, locale: I18NLocaleCode): TagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteArticle(id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  deleteBranch(id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  deleteCategory(id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  deleteContact(id: ID!): ContactEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteHomepage(locale: I18NLocaleCode): HomepageEntityResponse
  deleteOpeningTime(id: ID!): OpeningTimeEntityResponse
  deletePage(id: ID!): PageEntityResponse
  deleteTag(id: ID!, locale: I18NLocaleCode): TagEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateArticle(data: ArticleInput!, id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  updateBranch(data: BranchInput!, id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  updateCategory(data: CategoryInput!, id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  updateContact(data: ContactInput!, id: ID!): ContactEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateHomepage(data: HomepageInput!, locale: I18NLocaleCode): HomepageEntityResponse
  updateOpeningTime(data: OpeningTimeInput!, id: ID!): OpeningTimeEntityResponse
  updatePage(data: PageInput!, id: ID!): PageEntityResponse
  updateTag(data: TagInput!, id: ID!, locale: I18NLocaleCode): TagEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type OpeningTime {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  createdAt: DateTime
  internalName: String!
  openingHours(filters: ComponentItemsOpeningHoursItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsOpeningHoursItem]
  updatedAt: DateTime
}

type OpeningTimeEntity {
  attributes: OpeningTime
  id: ID
}

type OpeningTimeEntityResponse {
  data: OpeningTimeEntity
}

type OpeningTimeEntityResponseCollection {
  data: [OpeningTimeEntity!]!
  meta: ResponseCollectionMeta!
}

input OpeningTimeFiltersInput {
  and: [OpeningTimeFiltersInput]
  branches: BranchFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  internalName: StringFilterInput
  not: OpeningTimeFiltersInput
  openingHours: ComponentItemsOpeningHoursItemFiltersInput
  or: [OpeningTimeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input OpeningTimeInput {
  branches: [ID]
  internalName: String
  openingHours: [ComponentItemsOpeningHoursItemInput]
}

type OpeningTimeRelationResponseCollection {
  data: [OpeningTimeEntity!]!
}

type Page {
  childPages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  createdAt: DateTime
  header: [PageHeaderDynamicZone]
  parentPage: PageEntityResponse
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZone]
  slug: String!
  title: String!
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  childPages: PageFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  parentPage: PageFiltersInput
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

union PageHeaderDynamicZone = ComponentHeaderSectionsBranchMap | ComponentHeaderSectionsGallery | ComponentHeaderSectionsImage | Error

scalar PageHeaderDynamicZoneInput

input PageInput {
  childPages: [ID]
  header: [PageHeaderDynamicZoneInput!]
  parentPage: ID
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZoneInput!]
  slug: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

union PageSectionsDynamicZone = ComponentSectionsColumns | ComponentSectionsImageAndText | ComponentSectionsImageAndTextOverlapped | ComponentSectionsOrderedCards | ComponentSectionsRichtext | Error

scalar PageSectionsDynamicZoneInput

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  article(id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  articles(filters: ArticleFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
  branch(id: ID, locale: I18NLocaleCode): BranchEntityResponse
  branches(filters: BranchFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchEntityResponseCollection
  categories(filters: CategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  contact(id: ID): ContactEntityResponse
  contacts(filters: ContactFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContactEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentEntityResponseCollection
  homepage(locale: I18NLocaleCode): HomepageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  openingTime(id: ID): OpeningTimeEntityResponse
  openingTimes(filters: OpeningTimeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OpeningTimeEntityResponseCollection
  page(id: ID): PageEntityResponse
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  tag(id: ID, locale: I18NLocaleCode): TagEntityResponse
  tags(filters: TagFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  createdAt: DateTime
  locale: String
  localizations(filters: TagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: TagFiltersInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  publishedAt: DateTime
  slug: String
  title: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  picture: UploadFileEntityResponse
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  picture: ID
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
