### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  addedAt: DateTime!
  alias: String
  articleCategory: ArticleCategoryEntityResponse
  content: String
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  isCurrentChangeInOpeningHours: Boolean
  locale: String
  localizations(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  perex: String
  publishedAt: DateTime
  slug: String!
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type ArticleCategory {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: ArticleCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleCategoryRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticleCategoryEntity {
  attributes: ArticleCategory
  id: ID
}

type ArticleCategoryEntityResponse {
  data: ArticleCategoryEntity
}

type ArticleCategoryEntityResponseCollection {
  data: [ArticleCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleCategoryFiltersInput {
  and: [ArticleCategoryFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ArticleCategoryFiltersInput
  not: ArticleCategoryFiltersInput
  or: [ArticleCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleCategoryInput {
  articles: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type ArticleCategoryRelationResponseCollection {
  data: [ArticleCategoryEntity!]!
}

type ArticleEntity {
  attributes: Article
  id: ID
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleFiltersInput {
  addedAt: DateTimeFilterInput
  alias: StringFilterInput
  and: [ArticleFiltersInput]
  articleCategory: ArticleCategoryFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isCurrentChangeInOpeningHours: BooleanFilterInput
  locale: StringFilterInput
  localizations: ArticleFiltersInput
  not: ArticleFiltersInput
  or: [ArticleFiltersInput]
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleInput {
  addedAt: DateTime
  alias: String
  articleCategory: ID
  content: String
  coverMedia: ID
  gallery: [ID]
  isCurrentChangeInOpeningHours: Boolean
  perex: String
  publishedAt: DateTime
  slug: String
  tags: [ID]
  title: String
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Branch {
  address: String
  barrierFreeInfo: String
  contacts(filters: ContactFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContactRelationResponseCollection
  createdAt: DateTime
  latitude: Float
  locale: String
  localizations(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  longitude: Float
  mapIconName: String
  navigateToLink: String
  openingTimes(filters: OpeningTimeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OpeningTimeRelationResponseCollection
  page: PageEntityResponse
  parkingInfo: String
  publicTransportInfo: String
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type BranchEntity {
  attributes: Branch
  id: ID
}

type BranchEntityResponse {
  data: BranchEntity
}

type BranchEntityResponseCollection {
  data: [BranchEntity!]!
  meta: ResponseCollectionMeta!
}

input BranchFiltersInput {
  address: StringFilterInput
  and: [BranchFiltersInput]
  barrierFreeInfo: StringFilterInput
  contacts: ContactFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  latitude: FloatFilterInput
  locale: StringFilterInput
  localizations: BranchFiltersInput
  longitude: FloatFilterInput
  mapIconName: StringFilterInput
  navigateToLink: StringFilterInput
  not: BranchFiltersInput
  openingTimes: OpeningTimeFiltersInput
  or: [BranchFiltersInput]
  page: PageFiltersInput
  parkingInfo: StringFilterInput
  publicTransportInfo: StringFilterInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BranchInput {
  address: String
  barrierFreeInfo: String
  contacts: [ID]
  latitude: Float
  longitude: Float
  mapIconName: String
  navigateToLink: String
  openingTimes: [ID]
  page: ID
  parkingInfo: String
  publicTransportInfo: String
  publishedAt: DateTime
  title: String
}

type BranchRelationResponseCollection {
  data: [BranchEntity!]!
}

type ComponentHeaderSectionsBranchMap {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  id: ID!
}

input ComponentHeaderSectionsBranchMapFiltersInput {
  and: [ComponentHeaderSectionsBranchMapFiltersInput]
  branches: BranchFiltersInput
  not: ComponentHeaderSectionsBranchMapFiltersInput
  or: [ComponentHeaderSectionsBranchMapFiltersInput]
}

input ComponentHeaderSectionsBranchMapInput {
  branches: [ID]
  id: ID
}

type ComponentHeaderSectionsCareers {
  alternativeTextVideo: String
  id: ID!
  image: UploadFileEntityResponse
  imageQuote: String
  videoUrl: String!
}

input ComponentHeaderSectionsCareersFiltersInput {
  alternativeTextVideo: StringFilterInput
  and: [ComponentHeaderSectionsCareersFiltersInput]
  imageQuote: StringFilterInput
  not: ComponentHeaderSectionsCareersFiltersInput
  or: [ComponentHeaderSectionsCareersFiltersInput]
  videoUrl: StringFilterInput
}

input ComponentHeaderSectionsCareersInput {
  alternativeTextVideo: String
  id: ID
  image: ID
  imageQuote: String
  videoUrl: String
}

type ComponentHeaderSectionsFeaturedNews {
  articlesTitle: String!
  firstArticle: ArticleEntityResponse
  id: ID!
  secondArticle: ArticleEntityResponse
}

input ComponentHeaderSectionsFeaturedNewsFiltersInput {
  and: [ComponentHeaderSectionsFeaturedNewsFiltersInput]
  articlesTitle: StringFilterInput
  firstArticle: ArticleFiltersInput
  not: ComponentHeaderSectionsFeaturedNewsFiltersInput
  or: [ComponentHeaderSectionsFeaturedNewsFiltersInput]
  secondArticle: ArticleFiltersInput
}

input ComponentHeaderSectionsFeaturedNewsInput {
  articlesTitle: String
  firstArticle: ID
  id: ID
  secondArticle: ID
}

type ComponentHeaderSectionsGallery {
  id: ID!
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
}

input ComponentHeaderSectionsGalleryFiltersInput {
  and: [ComponentHeaderSectionsGalleryFiltersInput]
  not: ComponentHeaderSectionsGalleryFiltersInput
  or: [ComponentHeaderSectionsGalleryFiltersInput]
}

input ComponentHeaderSectionsGalleryInput {
  id: ID
  medias: [ID]
}

type ComponentHeaderSectionsIcon {
  iconName: String!
  id: ID!
}

input ComponentHeaderSectionsIconFiltersInput {
  and: [ComponentHeaderSectionsIconFiltersInput]
  iconName: StringFilterInput
  not: ComponentHeaderSectionsIconFiltersInput
  or: [ComponentHeaderSectionsIconFiltersInput]
}

input ComponentHeaderSectionsIconInput {
  iconName: String
  id: ID
}

type ComponentHeaderSectionsImage {
  id: ID!
  media: UploadFileEntityResponse!
}

input ComponentHeaderSectionsImageFiltersInput {
  and: [ComponentHeaderSectionsImageFiltersInput]
  not: ComponentHeaderSectionsImageFiltersInput
  or: [ComponentHeaderSectionsImageFiltersInput]
}

input ComponentHeaderSectionsImageInput {
  id: ID
  media: ID
}

type ComponentHeaderSectionsPickupDay {
  anchors(filters: ComponentItemsAnchorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsAnchor]
  carouselTitle: String!
  id: ID!
  showMoreLink: ComponentItemsLink
}

input ComponentHeaderSectionsPickupDayFiltersInput {
  anchors: ComponentItemsAnchorFiltersInput
  and: [ComponentHeaderSectionsPickupDayFiltersInput]
  carouselTitle: StringFilterInput
  not: ComponentHeaderSectionsPickupDayFiltersInput
  or: [ComponentHeaderSectionsPickupDayFiltersInput]
  showMoreLink: ComponentItemsLinkFiltersInput
}

input ComponentHeaderSectionsPickupDayInput {
  anchors: [ComponentItemsAnchorInput]
  carouselTitle: String
  id: ID
  showMoreLink: ComponentItemsLinkInput
}

type ComponentHeaderSectionsSideImage {
  id: ID!
  media: UploadFileEntityResponse!
}

input ComponentHeaderSectionsSideImageFiltersInput {
  and: [ComponentHeaderSectionsSideImageFiltersInput]
  not: ComponentHeaderSectionsSideImageFiltersInput
  or: [ComponentHeaderSectionsSideImageFiltersInput]
}

input ComponentHeaderSectionsSideImageInput {
  id: ID
  media: ID
}

type ComponentItemsAnchor {
  id: ID!
  label: String!
  targetId: String!
}

input ComponentItemsAnchorFiltersInput {
  and: [ComponentItemsAnchorFiltersInput]
  label: StringFilterInput
  not: ComponentItemsAnchorFiltersInput
  or: [ComponentItemsAnchorFiltersInput]
  targetId: StringFilterInput
}

input ComponentItemsAnchorInput {
  id: ID
  label: String
  targetId: String
}

type ComponentItemsBoardMembersItem {
  id: ID!
  image: UploadFileEntityResponse
  links(filters: ComponentItemsLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsLink]
  name: String!
  position: String!
}

input ComponentItemsBoardMembersItemFiltersInput {
  and: [ComponentItemsBoardMembersItemFiltersInput]
  links: ComponentItemsLinkFiltersInput
  name: StringFilterInput
  not: ComponentItemsBoardMembersItemFiltersInput
  or: [ComponentItemsBoardMembersItemFiltersInput]
  position: StringFilterInput
}

input ComponentItemsBoardMembersItemInput {
  id: ID
  image: ID
  links: [ComponentItemsLinkInput]
  name: String
  position: String
}

type ComponentItemsCardSliderCard {
  id: ID!
  image: UploadFileEntityResponse!
  text: String
  title: String!
}

input ComponentItemsCardSliderCardFiltersInput {
  and: [ComponentItemsCardSliderCardFiltersInput]
  not: ComponentItemsCardSliderCardFiltersInput
  or: [ComponentItemsCardSliderCardFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsCardSliderCardInput {
  id: ID
  image: ID
  text: String
  title: String
}

type ComponentItemsCardsListItem {
  id: ID!
  link: ComponentItemsLink!
  subtext: String
  title: String!
}

input ComponentItemsCardsListItemFiltersInput {
  and: [ComponentItemsCardsListItemFiltersInput]
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsCardsListItemFiltersInput
  or: [ComponentItemsCardsListItemFiltersInput]
  subtext: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsCardsListItemInput {
  id: ID
  link: ComponentItemsLinkInput
  subtext: String
  title: String
}

type ComponentItemsColumnsItem {
  id: ID!
  image: UploadFileEntityResponse
  text: String
  title: String
}

input ComponentItemsColumnsItemFiltersInput {
  and: [ComponentItemsColumnsItemFiltersInput]
  not: ComponentItemsColumnsItemFiltersInput
  or: [ComponentItemsColumnsItemFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsColumnsItemInput {
  id: ID
  image: ID
  text: String
  title: String
}

type ComponentItemsColumnsListItem {
  content: String!
  icon: UploadFileEntityResponse
  id: ID!
}

input ComponentItemsColumnsListItemFiltersInput {
  and: [ComponentItemsColumnsListItemFiltersInput]
  content: StringFilterInput
  not: ComponentItemsColumnsListItemFiltersInput
  or: [ComponentItemsColumnsListItemFiltersInput]
}

input ComponentItemsColumnsListItemInput {
  content: String
  icon: ID
  id: ID
}

type ComponentItemsContactsBranch {
  branch: BranchEntityResponse
  id: ID!
  text: String
  title: String
}

input ComponentItemsContactsBranchFiltersInput {
  and: [ComponentItemsContactsBranchFiltersInput]
  branch: BranchFiltersInput
  not: ComponentItemsContactsBranchFiltersInput
  or: [ComponentItemsContactsBranchFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsContactsBranchInput {
  branch: ID
  id: ID
  text: String
  title: String
}

type ComponentItemsContactsContact {
  contact: ContactEntityResponse
  id: ID!
  text: String
  title: String
}

input ComponentItemsContactsContactFiltersInput {
  and: [ComponentItemsContactsContactFiltersInput]
  contact: ContactFiltersInput
  not: ComponentItemsContactsContactFiltersInput
  or: [ComponentItemsContactsContactFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsContactsContactInput {
  contact: ID
  id: ID
  text: String
  title: String
}

type ComponentItemsContactsOpeningTime {
  id: ID!
  openingTime: OpeningTimeEntityResponse
  text: String
  title: String
}

input ComponentItemsContactsOpeningTimeFiltersInput {
  and: [ComponentItemsContactsOpeningTimeFiltersInput]
  not: ComponentItemsContactsOpeningTimeFiltersInput
  openingTime: OpeningTimeFiltersInput
  or: [ComponentItemsContactsOpeningTimeFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsContactsOpeningTimeInput {
  id: ID
  openingTime: ID
  text: String
  title: String
}

type ComponentItemsFileItem {
  id: ID!
  media: UploadFileEntityResponse!
  title: String
}

input ComponentItemsFileItemFiltersInput {
  and: [ComponentItemsFileItemFiltersInput]
  not: ComponentItemsFileItemFiltersInput
  or: [ComponentItemsFileItemFiltersInput]
  title: StringFilterInput
}

input ComponentItemsFileItemInput {
  id: ID
  media: ID
  title: String
}

type ComponentItemsFooterColumn {
  id: ID!
  links(filters: ComponentItemsLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsLink]
  title: String!
}

input ComponentItemsFooterColumnFiltersInput {
  and: [ComponentItemsFooterColumnFiltersInput]
  links: ComponentItemsLinkFiltersInput
  not: ComponentItemsFooterColumnFiltersInput
  or: [ComponentItemsFooterColumnFiltersInput]
  title: StringFilterInput
}

input ComponentItemsFooterColumnInput {
  id: ID
  links: [ComponentItemsLinkInput]
  title: String
}

type ComponentItemsFormCtaBannerLink {
  email: String
  form: FormEntityResponse
  id: ID!
  label: String
  url: String
}

input ComponentItemsFormCtaBannerLinkFiltersInput {
  and: [ComponentItemsFormCtaBannerLinkFiltersInput]
  email: StringFilterInput
  form: FormFiltersInput
  label: StringFilterInput
  not: ComponentItemsFormCtaBannerLinkFiltersInput
  or: [ComponentItemsFormCtaBannerLinkFiltersInput]
  url: StringFilterInput
}

input ComponentItemsFormCtaBannerLinkInput {
  email: String
  form: ID
  id: ID
  label: String
  url: String
}

type ComponentItemsHeroMainTile {
  id: ID!
  link: ComponentItemsLink
  text: String
}

input ComponentItemsHeroMainTileFiltersInput {
  and: [ComponentItemsHeroMainTileFiltersInput]
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsHeroMainTileFiltersInput
  or: [ComponentItemsHeroMainTileFiltersInput]
  text: StringFilterInput
}

input ComponentItemsHeroMainTileInput {
  id: ID
  link: ComponentItemsLinkInput
  text: String
}

type ComponentItemsHeroSmallTile {
  icon: String
  id: ID!
  link: ComponentItemsLink
}

input ComponentItemsHeroSmallTileFiltersInput {
  and: [ComponentItemsHeroSmallTileFiltersInput]
  icon: StringFilterInput
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsHeroSmallTileFiltersInput
  or: [ComponentItemsHeroSmallTileFiltersInput]
}

input ComponentItemsHeroSmallTileInput {
  icon: String
  id: ID
  link: ComponentItemsLinkInput
}

type ComponentItemsHomepageServiceTile {
  id: ID!
  link: ComponentItemsLink
  text: String
  title: String!
}

input ComponentItemsHomepageServiceTileFiltersInput {
  and: [ComponentItemsHomepageServiceTileFiltersInput]
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsHomepageServiceTileFiltersInput
  or: [ComponentItemsHomepageServiceTileFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsHomepageServiceTileInput {
  id: ID
  link: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentItemsLink {
  article: ArticleEntityResponse
  branch: BranchEntityResponse
  document: DocumentEntityResponse
  id: ID!
  label: String
  page: PageEntityResponse
  service: ServiceEntityResponse
  url: String
  workshop: WorkshopEntityResponse
}

input ComponentItemsLinkFiltersInput {
  and: [ComponentItemsLinkFiltersInput]
  article: ArticleFiltersInput
  branch: BranchFiltersInput
  document: DocumentFiltersInput
  label: StringFilterInput
  not: ComponentItemsLinkFiltersInput
  or: [ComponentItemsLinkFiltersInput]
  page: PageFiltersInput
  service: ServiceFiltersInput
  url: StringFilterInput
  workshop: WorkshopFiltersInput
}

input ComponentItemsLinkInput {
  article: ID
  branch: ID
  document: ID
  id: ID
  label: String
  page: ID
  service: ID
  url: String
  workshop: ID
}

type ComponentItemsMenuHeader {
  contactsLink: ComponentItemsLink
  id: ID!
  searchLink: ComponentItemsLink
}

input ComponentItemsMenuHeaderFiltersInput {
  and: [ComponentItemsMenuHeaderFiltersInput]
  contactsLink: ComponentItemsLinkFiltersInput
  not: ComponentItemsMenuHeaderFiltersInput
  or: [ComponentItemsMenuHeaderFiltersInput]
  searchLink: ComponentItemsLinkFiltersInput
}

input ComponentItemsMenuHeaderInput {
  contactsLink: ComponentItemsLinkInput
  id: ID
  searchLink: ComponentItemsLinkInput
}

type ComponentItemsOpeningHoursItem {
  id: ID!
  label: String!
  value: String!
}

input ComponentItemsOpeningHoursItemFiltersInput {
  and: [ComponentItemsOpeningHoursItemFiltersInput]
  label: StringFilterInput
  not: ComponentItemsOpeningHoursItemFiltersInput
  or: [ComponentItemsOpeningHoursItemFiltersInput]
  value: StringFilterInput
}

input ComponentItemsOpeningHoursItemInput {
  id: ID
  label: String
  value: String
}

type ComponentItemsOpeningTimesItem {
  id: ID!
  openingTime: OpeningTimeEntityResponse
  title: String
}

input ComponentItemsOpeningTimesItemFiltersInput {
  and: [ComponentItemsOpeningTimesItemFiltersInput]
  not: ComponentItemsOpeningTimesItemFiltersInput
  openingTime: OpeningTimeFiltersInput
  or: [ComponentItemsOpeningTimesItemFiltersInput]
  title: StringFilterInput
}

input ComponentItemsOpeningTimesItemInput {
  id: ID
  openingTime: ID
  title: String
}

type ComponentItemsOrderedCardsItem {
  iconName: String
  id: ID!
  text: String
  title: String
}

input ComponentItemsOrderedCardsItemFiltersInput {
  and: [ComponentItemsOrderedCardsItemFiltersInput]
  iconName: StringFilterInput
  not: ComponentItemsOrderedCardsItemFiltersInput
  or: [ComponentItemsOrderedCardsItemFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsOrderedCardsItemInput {
  iconName: String
  id: ID
  text: String
  title: String
}

type ComponentItemsSlide {
  backgroundColor: String!
  id: ID!
  link: ComponentItemsLink
  media: UploadFileEntityResponse!
  text: String
  title: String!
}

input ComponentItemsSlideFiltersInput {
  and: [ComponentItemsSlideFiltersInput]
  backgroundColor: StringFilterInput
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsSlideFiltersInput
  or: [ComponentItemsSlideFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsSlideInput {
  backgroundColor: String
  id: ID
  link: ComponentItemsLinkInput
  media: ID
  text: String
  title: String
}

type ComponentItemsSortingGuide {
  alertMessageBottom: ComponentItemsSortingGuideAlertMessage
  alertMessageDoesntGoHere: ComponentItemsSortingGuideAlertMessage
  alertMessageGoesHere: ComponentItemsSortingGuideAlertMessage
  doesntGoHereItems(filters: ComponentItemsSortingGuideItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsSortingGuideItem]
  goesHereItems(filters: ComponentItemsSortingGuideItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsSortingGuideItem]
  id: ID!
  titleDoesntGoHere: String
  titleGoesHere: String
}

type ComponentItemsSortingGuideAccordionItem {
  id: ID!
  sortingGuide: ComponentItemsSortingGuide
  title: String!
  wasteType: ENUM_COMPONENTITEMSSORTINGGUIDEACCORDIONITEM_WASTETYPE!
}

input ComponentItemsSortingGuideAccordionItemFiltersInput {
  and: [ComponentItemsSortingGuideAccordionItemFiltersInput]
  not: ComponentItemsSortingGuideAccordionItemFiltersInput
  or: [ComponentItemsSortingGuideAccordionItemFiltersInput]
  sortingGuide: ComponentItemsSortingGuideFiltersInput
  title: StringFilterInput
  wasteType: StringFilterInput
}

input ComponentItemsSortingGuideAccordionItemInput {
  id: ID
  sortingGuide: ComponentItemsSortingGuideInput
  title: String
  wasteType: ENUM_COMPONENTITEMSSORTINGGUIDEACCORDIONITEM_WASTETYPE
}

type ComponentItemsSortingGuideAlertMessage {
  id: ID!
  text: String
  title: String
}

input ComponentItemsSortingGuideAlertMessageFiltersInput {
  and: [ComponentItemsSortingGuideAlertMessageFiltersInput]
  not: ComponentItemsSortingGuideAlertMessageFiltersInput
  or: [ComponentItemsSortingGuideAlertMessageFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentItemsSortingGuideAlertMessageInput {
  id: ID
  text: String
  title: String
}

input ComponentItemsSortingGuideFiltersInput {
  alertMessageBottom: ComponentItemsSortingGuideAlertMessageFiltersInput
  alertMessageDoesntGoHere: ComponentItemsSortingGuideAlertMessageFiltersInput
  alertMessageGoesHere: ComponentItemsSortingGuideAlertMessageFiltersInput
  and: [ComponentItemsSortingGuideFiltersInput]
  doesntGoHereItems: ComponentItemsSortingGuideItemFiltersInput
  goesHereItems: ComponentItemsSortingGuideItemFiltersInput
  not: ComponentItemsSortingGuideFiltersInput
  or: [ComponentItemsSortingGuideFiltersInput]
  titleDoesntGoHere: StringFilterInput
  titleGoesHere: StringFilterInput
}

input ComponentItemsSortingGuideInput {
  alertMessageBottom: ComponentItemsSortingGuideAlertMessageInput
  alertMessageDoesntGoHere: ComponentItemsSortingGuideAlertMessageInput
  alertMessageGoesHere: ComponentItemsSortingGuideAlertMessageInput
  doesntGoHereItems: [ComponentItemsSortingGuideItemInput]
  goesHereItems: [ComponentItemsSortingGuideItemInput]
  id: ID
  titleDoesntGoHere: String
  titleGoesHere: String
}

type ComponentItemsSortingGuideItem {
  id: ID!
  label: String!
}

input ComponentItemsSortingGuideItemFiltersInput {
  and: [ComponentItemsSortingGuideItemFiltersInput]
  label: StringFilterInput
  not: ComponentItemsSortingGuideItemFiltersInput
  or: [ComponentItemsSortingGuideItemFiltersInput]
}

input ComponentItemsSortingGuideItemInput {
  id: ID
  label: String
}

type ComponentItemsWasteSortingCardsItem {
  id: ID!
  link: ComponentItemsLink!
  title: String!
  variant: ENUM_COMPONENTITEMSWASTESORTINGCARDSITEM_VARIANT!
}

input ComponentItemsWasteSortingCardsItemFiltersInput {
  and: [ComponentItemsWasteSortingCardsItemFiltersInput]
  link: ComponentItemsLinkFiltersInput
  not: ComponentItemsWasteSortingCardsItemFiltersInput
  or: [ComponentItemsWasteSortingCardsItemFiltersInput]
  title: StringFilterInput
  variant: StringFilterInput
}

input ComponentItemsWasteSortingCardsItemInput {
  id: ID
  link: ComponentItemsLinkInput
  title: String
  variant: ENUM_COMPONENTITEMSWASTESORTINGCARDSITEM_VARIANT
}

type ComponentItemsWorkshopDate {
  datetime: DateTime!
  id: ID!
}

input ComponentItemsWorkshopDateFiltersInput {
  and: [ComponentItemsWorkshopDateFiltersInput]
  datetime: DateTimeFilterInput
  internalName: StringFilterInput
  not: ComponentItemsWorkshopDateFiltersInput
  or: [ComponentItemsWorkshopDateFiltersInput]
}

input ComponentItemsWorkshopDateInput {
  datetime: DateTime
  id: ID
  internalName: String
}

type ComponentMenuMenuItem {
  id: ID!
  label: String!
  sections(filters: ComponentMenuMenuSectionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuMenuSection]
  seeAllLink: ComponentItemsLink
}

input ComponentMenuMenuItemFiltersInput {
  and: [ComponentMenuMenuItemFiltersInput]
  label: StringFilterInput
  not: ComponentMenuMenuItemFiltersInput
  or: [ComponentMenuMenuItemFiltersInput]
  sections: ComponentMenuMenuSectionFiltersInput
  seeAllLink: ComponentItemsLinkFiltersInput
}

input ComponentMenuMenuItemInput {
  id: ID
  label: String
  sections: [ComponentMenuMenuSectionInput]
  seeAllLink: ComponentItemsLinkInput
}

type ComponentMenuMenuLink {
  branch: BranchEntityResponse
  id: ID!
  label: String
  page: PageEntityResponse
  service: ServiceEntityResponse
  url: String
  workshop: WorkshopEntityResponse
}

input ComponentMenuMenuLinkFiltersInput {
  and: [ComponentMenuMenuLinkFiltersInput]
  branch: BranchFiltersInput
  label: StringFilterInput
  not: ComponentMenuMenuLinkFiltersInput
  or: [ComponentMenuMenuLinkFiltersInput]
  page: PageFiltersInput
  service: ServiceFiltersInput
  url: StringFilterInput
  workshop: WorkshopFiltersInput
}

input ComponentMenuMenuLinkInput {
  branch: ID
  id: ID
  label: String
  page: ID
  service: ID
  url: String
  workshop: ID
}

type ComponentMenuMenuSection {
  colSpan: Int!
  hasDividers: Boolean!
  id: ID!
  label: String!
  links(filters: ComponentMenuMenuLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuMenuLink]
  multicolumnBehaviour: ENUM_COMPONENTMENUMENUSECTION_MULTICOLUMNBEHAVIOUR
  specialSectionType: ENUM_COMPONENTMENUMENUSECTION_SPECIALSECTIONTYPE
}

input ComponentMenuMenuSectionFiltersInput {
  and: [ComponentMenuMenuSectionFiltersInput]
  colSpan: IntFilterInput
  hasDividers: BooleanFilterInput
  label: StringFilterInput
  links: ComponentMenuMenuLinkFiltersInput
  multicolumnBehaviour: StringFilterInput
  not: ComponentMenuMenuSectionFiltersInput
  or: [ComponentMenuMenuSectionFiltersInput]
  specialSectionType: StringFilterInput
}

input ComponentMenuMenuSectionInput {
  colSpan: Int
  hasDividers: Boolean
  id: ID
  label: String
  links: [ComponentMenuMenuLinkInput]
  multicolumnBehaviour: ENUM_COMPONENTMENUMENUSECTION_MULTICOLUMNBEHAVIOUR
  specialSectionType: ENUM_COMPONENTMENUMENUSECTION_SPECIALSECTIONTYPE
}

type ComponentSectionsArticles {
  id: ID!
  text: String
  title: String
}

input ComponentSectionsArticlesFiltersInput {
  and: [ComponentSectionsArticlesFiltersInput]
  not: ComponentSectionsArticlesFiltersInput
  or: [ComponentSectionsArticlesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

type ComponentSectionsArticlesHomepageSection {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  id: ID!
  showMoreLink: ComponentItemsLink
  text: String
  title: String
}

input ComponentSectionsArticlesHomepageSectionFiltersInput {
  and: [ComponentSectionsArticlesHomepageSectionFiltersInput]
  articles: ArticleFiltersInput
  not: ComponentSectionsArticlesHomepageSectionFiltersInput
  or: [ComponentSectionsArticlesHomepageSectionFiltersInput]
  showMoreLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsArticlesHomepageSectionInput {
  articles: [ID]
  id: ID
  showMoreLink: ComponentItemsLinkInput
  text: String
  title: String
}

input ComponentSectionsArticlesInput {
  id: ID
  text: String
  title: String
}

type ComponentSectionsBanner {
  id: ID!
  image: UploadFileEntityResponse!
  primaryButtonLink: ComponentItemsLink!
  secondaryButtonLink: ComponentItemsLink
  text: String
  title: String!
  variant: ENUM_COMPONENTSECTIONSBANNER_VARIANT!
}

input ComponentSectionsBannerFiltersInput {
  and: [ComponentSectionsBannerFiltersInput]
  not: ComponentSectionsBannerFiltersInput
  or: [ComponentSectionsBannerFiltersInput]
  primaryButtonLink: ComponentItemsLinkFiltersInput
  secondaryButtonLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
  variant: StringFilterInput
}

input ComponentSectionsBannerInput {
  id: ID
  image: ID
  primaryButtonLink: ComponentItemsLinkInput
  secondaryButtonLink: ComponentItemsLinkInput
  text: String
  title: String
  variant: ENUM_COMPONENTSECTIONSBANNER_VARIANT
}

type ComponentSectionsBoardMembers {
  boardMembers(filters: ComponentItemsBoardMembersItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsBoardMembersItem]
  id: ID!
  text: String
  title: String
}

input ComponentSectionsBoardMembersFiltersInput {
  and: [ComponentSectionsBoardMembersFiltersInput]
  boardMembers: ComponentItemsBoardMembersItemFiltersInput
  not: ComponentSectionsBoardMembersFiltersInput
  or: [ComponentSectionsBoardMembersFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsBoardMembersInput {
  boardMembers: [ComponentItemsBoardMembersItemInput]
  id: ID
  text: String
  title: String
}

type ComponentSectionsBranches {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  id: ID!
  text: String
  title: String
}

input ComponentSectionsBranchesFiltersInput {
  and: [ComponentSectionsBranchesFiltersInput]
  branches: BranchFiltersInput
  not: ComponentSectionsBranchesFiltersInput
  or: [ComponentSectionsBranchesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsBranchesInput {
  branches: [ID]
  id: ID
  text: String
  title: String
}

type ComponentSectionsCardSlider {
  backgroundColor: ENUM_COMPONENTSECTIONSCARDSLIDER_BACKGROUNDCOLOR!
  cards(filters: ComponentItemsCardSliderCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsCardSliderCard]!
  id: ID!
  text: String
  title: String
}

input ComponentSectionsCardSliderFiltersInput {
  and: [ComponentSectionsCardSliderFiltersInput]
  backgroundColor: StringFilterInput
  cards: ComponentItemsCardSliderCardFiltersInput
  not: ComponentSectionsCardSliderFiltersInput
  or: [ComponentSectionsCardSliderFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsCardSliderInput {
  backgroundColor: ENUM_COMPONENTSECTIONSCARDSLIDER_BACKGROUNDCOLOR
  cards: [ComponentItemsCardSliderCardInput]
  id: ID
  text: String
  title: String
}

type ComponentSectionsCardsList {
  cards(filters: ComponentItemsCardsListItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsCardsListItem]
  id: ID!
  linkLabelOverride: String
  text: String
  title: String
}

input ComponentSectionsCardsListFiltersInput {
  and: [ComponentSectionsCardsListFiltersInput]
  cards: ComponentItemsCardsListItemFiltersInput
  linkLabelOverride: StringFilterInput
  not: ComponentSectionsCardsListFiltersInput
  or: [ComponentSectionsCardsListFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsCardsListInput {
  cards: [ComponentItemsCardsListItemInput]
  id: ID
  linkLabelOverride: String
  text: String
  title: String
}

type ComponentSectionsColumns {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR!
  id: ID!
  items(filters: ComponentItemsColumnsItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsColumnsItem]!
  text: String
  title: String
}

input ComponentSectionsColumnsFiltersInput {
  and: [ComponentSectionsColumnsFiltersInput]
  backgroundColor: StringFilterInput
  items: ComponentItemsColumnsItemFiltersInput
  not: ComponentSectionsColumnsFiltersInput
  or: [ComponentSectionsColumnsFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsColumnsInput {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR
  id: ID
  items: [ComponentItemsColumnsItemInput]
  text: String
  title: String
}

type ComponentSectionsColumnsList {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNSLIST_BACKGROUNDCOLOR
  id: ID!
  leftColumn(filters: ComponentItemsColumnsListItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsColumnsListItem]
  rightColumn(filters: ComponentItemsColumnsListItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsColumnsListItem]
  text: String
  title: String
}

input ComponentSectionsColumnsListFiltersInput {
  and: [ComponentSectionsColumnsListFiltersInput]
  backgroundColor: StringFilterInput
  leftColumn: ComponentItemsColumnsListItemFiltersInput
  not: ComponentSectionsColumnsListFiltersInput
  or: [ComponentSectionsColumnsListFiltersInput]
  rightColumn: ComponentItemsColumnsListItemFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsColumnsListInput {
  backgroundColor: ENUM_COMPONENTSECTIONSCOLUMNSLIST_BACKGROUNDCOLOR
  id: ID
  leftColumn: [ComponentItemsColumnsListItemInput]
  rightColumn: [ComponentItemsColumnsListItemInput]
  text: String
  title: String
}

type ComponentSectionsContacts {
  branches(filters: ComponentItemsContactsBranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsContactsBranch]
  contacts(filters: ComponentItemsContactsContactFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsContactsContact]
  id: ID!
  openingTimes(filters: ComponentItemsContactsOpeningTimeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsContactsOpeningTime]
  title: String
}

input ComponentSectionsContactsFiltersInput {
  and: [ComponentSectionsContactsFiltersInput]
  branches: ComponentItemsContactsBranchFiltersInput
  contacts: ComponentItemsContactsContactFiltersInput
  not: ComponentSectionsContactsFiltersInput
  openingTimes: ComponentItemsContactsOpeningTimeFiltersInput
  or: [ComponentSectionsContactsFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsContactsInput {
  branches: [ComponentItemsContactsBranchInput]
  contacts: [ComponentItemsContactsContactInput]
  id: ID
  openingTimes: [ComponentItemsContactsOpeningTimeInput]
  title: String
}

type ComponentSectionsDivider {
  backgroundColor: ENUM_COMPONENTSECTIONSDIVIDER_BACKGROUNDCOLOR!
  id: ID!
}

input ComponentSectionsDividerFiltersInput {
  and: [ComponentSectionsDividerFiltersInput]
  backgroundColor: StringFilterInput
  not: ComponentSectionsDividerFiltersInput
  or: [ComponentSectionsDividerFiltersInput]
}

input ComponentSectionsDividerInput {
  backgroundColor: ENUM_COMPONENTSECTIONSDIVIDER_BACKGROUNDCOLOR
  id: ID
}

type ComponentSectionsDocuments {
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  id: ID!
  showAll: Boolean!
  text: String
  title: String
}

input ComponentSectionsDocumentsFiltersInput {
  and: [ComponentSectionsDocumentsFiltersInput]
  documents: DocumentFiltersInput
  not: ComponentSectionsDocumentsFiltersInput
  or: [ComponentSectionsDocumentsFiltersInput]
  showAll: BooleanFilterInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsDocumentsInput {
  documents: [ID]
  id: ID
  showAll: Boolean
  text: String
  title: String
}

type ComponentSectionsFaq {
  backgroundColor: ENUM_COMPONENTSECTIONSFAQ_BACKGROUNDCOLOR!
  faqCategories(filters: FaqCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqCategoryRelationResponseCollection
  faqs(filters: FaqFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqRelationResponseCollection
  id: ID!
  showMoreLink: ComponentItemsLink
  text: String
  title: String
}

type ComponentSectionsFaqCategories {
  faqCategories(filters: FaqCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqCategoryRelationResponseCollection
  id: ID!
  showAll: Boolean!
  text: String
  title: String
}

input ComponentSectionsFaqCategoriesFiltersInput {
  and: [ComponentSectionsFaqCategoriesFiltersInput]
  faqCategories: FaqCategoryFiltersInput
  not: ComponentSectionsFaqCategoriesFiltersInput
  or: [ComponentSectionsFaqCategoriesFiltersInput]
  showAll: BooleanFilterInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsFaqCategoriesInput {
  faqCategories: [ID]
  id: ID
  showAll: Boolean
  text: String
  title: String
}

input ComponentSectionsFaqFiltersInput {
  and: [ComponentSectionsFaqFiltersInput]
  backgroundColor: StringFilterInput
  faqCategories: FaqCategoryFiltersInput
  faqs: FaqFiltersInput
  not: ComponentSectionsFaqFiltersInput
  or: [ComponentSectionsFaqFiltersInput]
  showMoreLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsFaqInput {
  backgroundColor: ENUM_COMPONENTSECTIONSFAQ_BACKGROUNDCOLOR
  faqCategories: [ID]
  faqs: [ID]
  id: ID
  showMoreLink: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsFiles {
  files(filters: ComponentItemsFileItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsFileItem]!
  id: ID!
  text: String
  title: String
}

input ComponentSectionsFilesFiltersInput {
  and: [ComponentSectionsFilesFiltersInput]
  files: ComponentItemsFileItemFiltersInput
  not: ComponentSectionsFilesFiltersInput
  or: [ComponentSectionsFilesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsFilesInput {
  files: [ComponentItemsFileItemInput]
  id: ID
  text: String
  title: String
}

type ComponentSectionsFormCtaBanner {
  bannerLink: ComponentItemsFormCtaBannerLink!
  bannerTitle: String!
  id: ID!
  text: String
  title: String
}

input ComponentSectionsFormCtaBannerFiltersInput {
  and: [ComponentSectionsFormCtaBannerFiltersInput]
  bannerLink: ComponentItemsFormCtaBannerLinkFiltersInput
  bannerTitle: StringFilterInput
  not: ComponentSectionsFormCtaBannerFiltersInput
  or: [ComponentSectionsFormCtaBannerFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsFormCtaBannerInput {
  bannerLink: ComponentItemsFormCtaBannerLinkInput
  bannerTitle: String
  id: ID
  text: String
  title: String
}

type ComponentSectionsGlobalSearch {
  id: ID!
  title: String
}

input ComponentSectionsGlobalSearchFiltersInput {
  and: [ComponentSectionsGlobalSearchFiltersInput]
  not: ComponentSectionsGlobalSearchFiltersInput
  or: [ComponentSectionsGlobalSearchFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsGlobalSearchInput {
  id: ID
  title: String
}

type ComponentSectionsHeroHomepageSection {
  id: ID!
  mainTiles(filters: ComponentItemsHeroMainTileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsHeroMainTile]
  slides(filters: ComponentItemsSlideFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsSlide]
  smallTiles(filters: ComponentItemsHeroSmallTileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsHeroSmallTile]
}

input ComponentSectionsHeroHomepageSectionFiltersInput {
  and: [ComponentSectionsHeroHomepageSectionFiltersInput]
  mainTiles: ComponentItemsHeroMainTileFiltersInput
  not: ComponentSectionsHeroHomepageSectionFiltersInput
  or: [ComponentSectionsHeroHomepageSectionFiltersInput]
  slides: ComponentItemsSlideFiltersInput
  smallTiles: ComponentItemsHeroSmallTileFiltersInput
}

input ComponentSectionsHeroHomepageSectionInput {
  id: ID
  mainTiles: [ComponentItemsHeroMainTileInput]
  slides: [ComponentItemsSlideInput]
  smallTiles: [ComponentItemsHeroSmallTileInput]
}

type ComponentSectionsImageAndText {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR!
  id: ID!
  image: UploadFileEntityResponse!
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION!
  primaryButton: ComponentItemsLink
  secondaryButton: ComponentItemsLink
  text: String
  title: String
}

input ComponentSectionsImageAndTextFiltersInput {
  and: [ComponentSectionsImageAndTextFiltersInput]
  backgroundColor: StringFilterInput
  imagePosition: StringFilterInput
  not: ComponentSectionsImageAndTextFiltersInput
  or: [ComponentSectionsImageAndTextFiltersInput]
  primaryButton: ComponentItemsLinkFiltersInput
  secondaryButton: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsImageAndTextInput {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR
  id: ID
  image: ID
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION
  primaryButton: ComponentItemsLinkInput
  secondaryButton: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsImageAndTextOverlapped {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR!
  id: ID!
  image: UploadFileEntityResponse!
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION!
  readMoreLink: ComponentItemsLink
  text: String
  title: String
}

input ComponentSectionsImageAndTextOverlappedFiltersInput {
  and: [ComponentSectionsImageAndTextOverlappedFiltersInput]
  backgroundColor: StringFilterInput
  imagePosition: StringFilterInput
  not: ComponentSectionsImageAndTextOverlappedFiltersInput
  or: [ComponentSectionsImageAndTextOverlappedFiltersInput]
  readMoreLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsImageAndTextOverlappedInput {
  backgroundColor: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR
  id: ID
  image: ID
  imagePosition: ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION
  readMoreLink: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsKoloHomepageSection {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  branchesTitle: String
  id: ID!
  mainCards(filters: ComponentItemsCardsListItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsCardsListItem]
  showMoreLink: ComponentItemsLink
  text: String
  title: String
}

input ComponentSectionsKoloHomepageSectionFiltersInput {
  and: [ComponentSectionsKoloHomepageSectionFiltersInput]
  branches: BranchFiltersInput
  branchesTitle: StringFilterInput
  mainCards: ComponentItemsCardsListItemFiltersInput
  not: ComponentSectionsKoloHomepageSectionFiltersInput
  or: [ComponentSectionsKoloHomepageSectionFiltersInput]
  showMoreLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsKoloHomepageSectionInput {
  branches: [ID]
  branchesTitle: String
  id: ID
  mainCards: [ComponentItemsCardsListItemInput]
  showMoreLink: ComponentItemsLinkInput
  text: String
  title: String
}

type ComponentSectionsOpeningTimes {
  branchLocation: BranchEntityResponse
  id: ID!
  openingTimes(filters: ComponentItemsOpeningTimesItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsOpeningTimesItem]!
  text: String
  title: String
}

input ComponentSectionsOpeningTimesFiltersInput {
  and: [ComponentSectionsOpeningTimesFiltersInput]
  branchLocation: BranchFiltersInput
  not: ComponentSectionsOpeningTimesFiltersInput
  openingTimes: ComponentItemsOpeningTimesItemFiltersInput
  or: [ComponentSectionsOpeningTimesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsOpeningTimesInput {
  branchLocation: ID
  id: ID
  openingTimes: [ComponentItemsOpeningTimesItemInput]
  text: String
  title: String
}

type ComponentSectionsOrderedCards {
  cards(filters: ComponentItemsOrderedCardsItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsOrderedCardsItem]!
  id: ID!
  text: String
  title: String
  variant: ENUM_COMPONENTSECTIONSORDEREDCARDS_VARIANT!
}

input ComponentSectionsOrderedCardsFiltersInput {
  and: [ComponentSectionsOrderedCardsFiltersInput]
  cards: ComponentItemsOrderedCardsItemFiltersInput
  not: ComponentSectionsOrderedCardsFiltersInput
  or: [ComponentSectionsOrderedCardsFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
  variant: StringFilterInput
}

input ComponentSectionsOrderedCardsInput {
  cards: [ComponentItemsOrderedCardsItemInput]
  id: ID
  text: String
  title: String
  variant: ENUM_COMPONENTSECTIONSORDEREDCARDS_VARIANT
}

type ComponentSectionsRichtext {
  backgroundColor: ENUM_COMPONENTSECTIONSRICHTEXT_BACKGROUNDCOLOR!
  content: String
  id: ID!
}

input ComponentSectionsRichtextFiltersInput {
  and: [ComponentSectionsRichtextFiltersInput]
  backgroundColor: StringFilterInput
  content: StringFilterInput
  not: ComponentSectionsRichtextFiltersInput
  or: [ComponentSectionsRichtextFiltersInput]
}

input ComponentSectionsRichtextInput {
  backgroundColor: ENUM_COMPONENTSECTIONSRICHTEXT_BACKGROUNDCOLOR
  content: String
  id: ID
}

type ComponentSectionsServices {
  id: ID!
  text: String
  title: String
}

input ComponentSectionsServicesFiltersInput {
  and: [ComponentSectionsServicesFiltersInput]
  not: ComponentSectionsServicesFiltersInput
  or: [ComponentSectionsServicesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

type ComponentSectionsServicesHomepageSection {
  id: ID!
  showMoreLink: ComponentItemsLink
  text: String
  tiles(filters: ComponentItemsHomepageServiceTileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsHomepageServiceTile]
  title: String
}

input ComponentSectionsServicesHomepageSectionFiltersInput {
  and: [ComponentSectionsServicesHomepageSectionFiltersInput]
  not: ComponentSectionsServicesHomepageSectionFiltersInput
  or: [ComponentSectionsServicesHomepageSectionFiltersInput]
  showMoreLink: ComponentItemsLinkFiltersInput
  text: StringFilterInput
  tiles: ComponentItemsHomepageServiceTileFiltersInput
  title: StringFilterInput
}

input ComponentSectionsServicesHomepageSectionInput {
  id: ID
  showMoreLink: ComponentItemsLinkInput
  text: String
  tiles: [ComponentItemsHomepageServiceTileInput]
  title: String
}

input ComponentSectionsServicesInput {
  id: ID
  text: String
  title: String
}

type ComponentSectionsSortingGuide {
  banner: ComponentSectionsBanner
  id: ID!
  sortingGuide: ComponentItemsSortingGuide
  text: String
  title: String
}

type ComponentSectionsSortingGuideAccordions {
  banner: ComponentSectionsBanner
  id: ID!
  sortingGuideAccordions(filters: ComponentItemsSortingGuideAccordionItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsSortingGuideAccordionItem]
  text: String
  title: String
}

input ComponentSectionsSortingGuideAccordionsFiltersInput {
  and: [ComponentSectionsSortingGuideAccordionsFiltersInput]
  banner: ComponentSectionsBannerFiltersInput
  not: ComponentSectionsSortingGuideAccordionsFiltersInput
  or: [ComponentSectionsSortingGuideAccordionsFiltersInput]
  sortingGuideAccordions: ComponentItemsSortingGuideAccordionItemFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsSortingGuideAccordionsInput {
  banner: ComponentSectionsBannerInput
  id: ID
  sortingGuideAccordions: [ComponentItemsSortingGuideAccordionItemInput]
  text: String
  title: String
}

input ComponentSectionsSortingGuideFiltersInput {
  and: [ComponentSectionsSortingGuideFiltersInput]
  banner: ComponentSectionsBannerFiltersInput
  not: ComponentSectionsSortingGuideFiltersInput
  or: [ComponentSectionsSortingGuideFiltersInput]
  sortingGuide: ComponentItemsSortingGuideFiltersInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsSortingGuideInput {
  banner: ComponentSectionsBannerInput
  id: ID
  sortingGuide: ComponentItemsSortingGuideInput
  text: String
  title: String
}

type ComponentSectionsTable {
  anchorId: String
  id: ID!
  text: String
  title: String
}

input ComponentSectionsTableFiltersInput {
  anchorId: StringFilterInput
  and: [ComponentSectionsTableFiltersInput]
  not: ComponentSectionsTableFiltersInput
  or: [ComponentSectionsTableFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsTableInput {
  anchorId: String
  id: ID
  text: String
  title: String
}

type ComponentSectionsVacancies {
  backgroundColor: ENUM_COMPONENTSECTIONSVACANCIES_BACKGROUNDCOLOR
  id: ID!
  text: String
  title: String
}

input ComponentSectionsVacanciesFiltersInput {
  and: [ComponentSectionsVacanciesFiltersInput]
  backgroundColor: StringFilterInput
  not: ComponentSectionsVacanciesFiltersInput
  or: [ComponentSectionsVacanciesFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsVacanciesInput {
  backgroundColor: ENUM_COMPONENTSECTIONSVACANCIES_BACKGROUNDCOLOR
  id: ID
  text: String
  title: String
}

type ComponentSectionsWasteCollectionDays {
  anchorId: String
  id: ID!
  text: String
  title: String
  wasteCollectionDaysType: String
}

input ComponentSectionsWasteCollectionDaysFiltersInput {
  anchorId: StringFilterInput
  and: [ComponentSectionsWasteCollectionDaysFiltersInput]
  not: ComponentSectionsWasteCollectionDaysFiltersInput
  or: [ComponentSectionsWasteCollectionDaysFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
  wasteCollectionDaysType: StringFilterInput
}

input ComponentSectionsWasteCollectionDaysInput {
  anchorId: String
  id: ID
  text: String
  title: String
  wasteCollectionDaysType: String
}

type ComponentSectionsWasteSortingCards {
  banner: ComponentSectionsBanner
  cards(filters: ComponentItemsWasteSortingCardsItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsWasteSortingCardsItem]
  id: ID!
  text: String
  title: String
}

input ComponentSectionsWasteSortingCardsFiltersInput {
  and: [ComponentSectionsWasteSortingCardsFiltersInput]
  banner: ComponentSectionsBannerFiltersInput
  cards: ComponentItemsWasteSortingCardsItemFiltersInput
  not: ComponentSectionsWasteSortingCardsFiltersInput
  or: [ComponentSectionsWasteSortingCardsFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsWasteSortingCardsInput {
  banner: ComponentSectionsBannerInput
  cards: [ComponentItemsWasteSortingCardsItemInput]
  id: ID
  text: String
  title: String
}

type ComponentSectionsWorkshops {
  id: ID!
  showAll: Boolean!
  text: String
  title: String
  workshops(filters: WorkshopFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): WorkshopRelationResponseCollection
}

input ComponentSectionsWorkshopsFiltersInput {
  and: [ComponentSectionsWorkshopsFiltersInput]
  not: ComponentSectionsWorkshopsFiltersInput
  or: [ComponentSectionsWorkshopsFiltersInput]
  showAll: BooleanFilterInput
  text: StringFilterInput
  title: StringFilterInput
  workshops: WorkshopFiltersInput
}

input ComponentSectionsWorkshopsInput {
  id: ID
  showAll: Boolean
  text: String
  title: String
  workshops: [ID]
}

type ComponentSharedMetaSocial {
  description: String!
  id: ID!
  image: UploadFileEntityResponse
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
  title: String!
}

input ComponentSharedMetaSocialFiltersInput {
  and: [ComponentSharedMetaSocialFiltersInput]
  description: StringFilterInput
  not: ComponentSharedMetaSocialFiltersInput
  or: [ComponentSharedMetaSocialFiltersInput]
  socialNetwork: StringFilterInput
  title: StringFilterInput
}

input ComponentSharedMetaSocialInput {
  description: String
  id: ID
  image: ID
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK
  title: String
}

type ComponentSharedSeo {
  canonicalURL: String
  id: ID!
  keywords: String
  metaDescription: String!
  metaImage: UploadFileEntityResponse
  metaRobots: String
  metaSocial(filters: ComponentSharedMetaSocialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedMetaSocial]
  metaTitle: String!
  metaViewport: String
  structuredData: JSON
}

input ComponentSharedSeoFiltersInput {
  and: [ComponentSharedSeoFiltersInput]
  canonicalURL: StringFilterInput
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaRobots: StringFilterInput
  metaSocial: ComponentSharedMetaSocialFiltersInput
  metaTitle: StringFilterInput
  metaViewport: StringFilterInput
  not: ComponentSharedSeoFiltersInput
  or: [ComponentSharedSeoFiltersInput]
  structuredData: JSONFilterInput
}

input ComponentSharedSeoInput {
  canonicalURL: String
  id: ID
  keywords: String
  metaDescription: String
  metaImage: ID
  metaRobots: String
  metaSocial: [ComponentSharedMetaSocialInput]
  metaTitle: String
  metaViewport: String
  structuredData: JSON
}

type ComponentSidebarsContactsSidebar {
  branch: BranchEntityResponse
  contact: ContactEntityResponse
  id: ID!
}

input ComponentSidebarsContactsSidebarFiltersInput {
  and: [ComponentSidebarsContactsSidebarFiltersInput]
  branch: BranchFiltersInput
  contact: ContactFiltersInput
  not: ComponentSidebarsContactsSidebarFiltersInput
  or: [ComponentSidebarsContactsSidebarFiltersInput]
}

input ComponentSidebarsContactsSidebarInput {
  branch: ID
  contact: ID
  id: ID
}

type ComponentSidebarsEmptySidebar {
  id: ID!
}

input ComponentSidebarsEmptySidebarFiltersInput {
  and: [ComponentSidebarsEmptySidebarFiltersInput]
  not: ComponentSidebarsEmptySidebarFiltersInput
  or: [ComponentSidebarsEmptySidebarFiltersInput]
}

input ComponentSidebarsEmptySidebarInput {
  id: ID
}

type Contact {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  createdAt: DateTime
  label: String!
  primaryEmail: String
  primaryPhone: String
  publishedAt: DateTime
  secondaryEmail: String
  secondaryPhone: String
  text: String
  updatedAt: DateTime
}

type ContactEntity {
  attributes: Contact
  id: ID
}

type ContactEntityResponse {
  data: ContactEntity
}

type ContactEntityResponseCollection {
  data: [ContactEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactFiltersInput {
  and: [ContactFiltersInput]
  branches: BranchFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  label: StringFilterInput
  not: ContactFiltersInput
  or: [ContactFiltersInput]
  primaryEmail: StringFilterInput
  primaryPhone: StringFilterInput
  publishedAt: DateTimeFilterInput
  secondaryEmail: StringFilterInput
  secondaryPhone: StringFilterInput
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContactInput {
  branches: [ID]
  label: String
  primaryEmail: String
  primaryPhone: String
  publishedAt: DateTime
  secondaryEmail: String
  secondaryPhone: String
  text: String
}

type ContactRelationResponseCollection {
  data: [ContactEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Document {
  createdAt: DateTime
  description: String
  documentCategory: DocumentCategoryEntityResponse
  files(filters: ComponentItemsFileItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsFileItem]!
  identificationNumber: String
  priceWithoutTax: String
  publishedAt: DateTime
  slug: String!
  supplier: String
  title: String!
  updatedAt: DateTime
}

type DocumentCategory {
  createdAt: DateTime
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  locale: String
  localizations(filters: DocumentCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentCategoryRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type DocumentCategoryEntity {
  attributes: DocumentCategory
  id: ID
}

type DocumentCategoryEntityResponse {
  data: DocumentCategoryEntity
}

type DocumentCategoryEntityResponseCollection {
  data: [DocumentCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentCategoryFiltersInput {
  and: [DocumentCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  documents: DocumentFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: DocumentCategoryFiltersInput
  not: DocumentCategoryFiltersInput
  or: [DocumentCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentCategoryInput {
  documents: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type DocumentCategoryRelationResponseCollection {
  data: [DocumentCategoryEntity!]!
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentCategory: DocumentCategoryFiltersInput
  files: ComponentItemsFileItemFiltersInput
  id: IDFilterInput
  identificationNumber: StringFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  priceWithoutTax: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  supplier: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  description: String
  documentCategory: ID
  files: [ComponentItemsFileItemInput]
  identificationNumber: String
  priceWithoutTax: String
  publishedAt: DateTime
  slug: String
  supplier: String
  title: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_COMPONENTITEMSSORTINGGUIDEACCORDIONITEM_WASTETYPE {
  cemetery
  christmasTrees
  civicAmenitySite
  cookingOilsAndFats
  glass
  kitchen
  mixed
  organic
  paper
  plastic
}

enum ENUM_COMPONENTITEMSWASTESORTINGCARDSITEM_VARIANT {
  cemetery
  christmasTrees
  civicAmenitySite
  cookingOilsAndFats
  glass
  kitchen
  mixed
  organic
  paper
  plastic
}

enum ENUM_COMPONENTMENUMENUSECTION_MULTICOLUMNBEHAVIOUR {
  fullwidth
  split_equally
}

enum ENUM_COMPONENTMENUMENUSECTION_SPECIALSECTIONTYPE {
  latest_articles
}

enum ENUM_COMPONENTSECTIONSBANNER_VARIANT {
  background_black
  background_grey
}

enum ENUM_COMPONENTSECTIONSCARDSLIDER_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSCOLUMNSLIST_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSCOLUMNS_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSDIVIDER_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSFAQ_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXTOVERLAPPED_IMAGEPOSITION {
  left
  left_shifted
  right
  right_shifted
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXT_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSIMAGEANDTEXT_IMAGEPOSITION {
  left
  right
}

enum ENUM_COMPONENTSECTIONSORDEREDCARDS_VARIANT {
  icons
  numbers
}

enum ENUM_COMPONENTSECTIONSRICHTEXT_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSECTIONSVACANCIES_BACKGROUNDCOLOR {
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
  Facebook
  Twitter
}

enum ENUM_SERVICECATEGORY_CATEGORYCOLOR {
  blue
  green
  none
  red
}

type Error {
  code: String!
  message: String
}

type Faq {
  content: String!
  createdAt: DateTime
  faqCategory: FaqCategoryEntityResponse
  locale: String
  localizations(filters: FaqFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqRelationResponseCollection
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type FaqCategory {
  banner: ComponentSectionsBanner
  createdAt: DateTime
  faqs(filters: FaqFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqRelationResponseCollection
  locale: String
  localizations(filters: FaqCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqCategoryRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type FaqCategoryEntity {
  attributes: FaqCategory
  id: ID
}

type FaqCategoryEntityResponse {
  data: FaqCategoryEntity
}

type FaqCategoryEntityResponseCollection {
  data: [FaqCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input FaqCategoryFiltersInput {
  and: [FaqCategoryFiltersInput]
  banner: ComponentSectionsBannerFiltersInput
  createdAt: DateTimeFilterInput
  faqs: FaqFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: FaqCategoryFiltersInput
  not: FaqCategoryFiltersInput
  or: [FaqCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FaqCategoryInput {
  banner: ComponentSectionsBannerInput
  faqs: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type FaqCategoryRelationResponseCollection {
  data: [FaqCategoryEntity!]!
}

type FaqEntity {
  attributes: Faq
  id: ID
}

type FaqEntityResponse {
  data: FaqEntity
}

type FaqEntityResponseCollection {
  data: [FaqEntity!]!
  meta: ResponseCollectionMeta!
}

input FaqFiltersInput {
  and: [FaqFiltersInput]
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  faqCategory: FaqCategoryFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: FaqFiltersInput
  not: FaqFiltersInput
  or: [FaqFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FaqInput {
  content: String
  faqCategory: ID
  publishedAt: DateTime
  title: String
}

type FaqRelationResponseCollection {
  data: [FaqEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type Footer {
  bottomLinks(filters: ComponentItemsLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsLink]
  columns(filters: ComponentItemsFooterColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsFooterColumn]
  createdAt: DateTime
  facebookUrl: String
  instagramUrl: String
  linkedinUrl: String
  locale: String
  localizations: FooterRelationResponseCollection
  text: String
  updatedAt: DateTime
}

type FooterEntity {
  attributes: Footer
  id: ID
}

type FooterEntityResponse {
  data: FooterEntity
}

type FooterEntityResponseCollection {
  data: [FooterEntity!]!
  meta: ResponseCollectionMeta!
}

input FooterFiltersInput {
  and: [FooterFiltersInput]
  bottomLinks: ComponentItemsLinkFiltersInput
  columns: ComponentItemsFooterColumnFiltersInput
  createdAt: DateTimeFilterInput
  facebookUrl: StringFilterInput
  instagramUrl: StringFilterInput
  linkedinUrl: StringFilterInput
  locale: StringFilterInput
  localizations: FooterFiltersInput
  not: FooterFiltersInput
  or: [FooterFiltersInput]
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FooterInput {
  bottomLinks: [ComponentItemsLinkInput]
  columns: [ComponentItemsFooterColumnInput]
  facebookUrl: String
  instagramUrl: String
  linkedinUrl: String
  text: String
}

type FooterRelationResponseCollection {
  data: [FooterEntity!]!
}

type Form {
  createdAt: DateTime
  formSlug: String
  parentService: ServiceEntityResponse
  slug: String!
  subtext: String
  title: String!
  updatedAt: DateTime
}

type FormEntity {
  attributes: Form
  id: ID
}

type FormEntityResponse {
  data: FormEntity
}

type FormEntityResponseCollection {
  data: [FormEntity!]!
  meta: ResponseCollectionMeta!
}

input FormFiltersInput {
  and: [FormFiltersInput]
  createdAt: DateTimeFilterInput
  formSlug: StringFilterInput
  id: IDFilterInput
  not: FormFiltersInput
  or: [FormFiltersInput]
  parentService: ServiceFiltersInput
  slug: StringFilterInput
  subtext: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FormInput {
  formSlug: String
  parentService: ID
  slug: String
  subtext: String
  title: String
}

type FormRelationResponseCollection {
  data: [FormEntity!]!
}

union GenericMorph = Article | ArticleCategory | Branch | ComponentHeaderSectionsBranchMap | ComponentHeaderSectionsCareers | ComponentHeaderSectionsFeaturedNews | ComponentHeaderSectionsGallery | ComponentHeaderSectionsIcon | ComponentHeaderSectionsImage | ComponentHeaderSectionsPickupDay | ComponentHeaderSectionsSideImage | ComponentItemsAnchor | ComponentItemsBoardMembersItem | ComponentItemsCardSliderCard | ComponentItemsCardsListItem | ComponentItemsColumnsItem | ComponentItemsColumnsListItem | ComponentItemsContactsBranch | ComponentItemsContactsContact | ComponentItemsContactsOpeningTime | ComponentItemsFileItem | ComponentItemsFooterColumn | ComponentItemsFormCtaBannerLink | ComponentItemsHeroMainTile | ComponentItemsHeroSmallTile | ComponentItemsHomepageServiceTile | ComponentItemsLink | ComponentItemsMenuHeader | ComponentItemsOpeningHoursItem | ComponentItemsOpeningTimesItem | ComponentItemsOrderedCardsItem | ComponentItemsSlide | ComponentItemsSortingGuide | ComponentItemsSortingGuideAccordionItem | ComponentItemsSortingGuideAlertMessage | ComponentItemsSortingGuideItem | ComponentItemsWasteSortingCardsItem | ComponentItemsWorkshopDate | ComponentMenuMenuItem | ComponentMenuMenuLink | ComponentMenuMenuSection | ComponentSectionsArticles | ComponentSectionsArticlesHomepageSection | ComponentSectionsBanner | ComponentSectionsBoardMembers | ComponentSectionsBranches | ComponentSectionsCardSlider | ComponentSectionsCardsList | ComponentSectionsColumns | ComponentSectionsColumnsList | ComponentSectionsContacts | ComponentSectionsDivider | ComponentSectionsDocuments | ComponentSectionsFaq | ComponentSectionsFaqCategories | ComponentSectionsFiles | ComponentSectionsFormCtaBanner | ComponentSectionsGlobalSearch | ComponentSectionsHeroHomepageSection | ComponentSectionsImageAndText | ComponentSectionsImageAndTextOverlapped | ComponentSectionsKoloHomepageSection | ComponentSectionsOpeningTimes | ComponentSectionsOrderedCards | ComponentSectionsRichtext | ComponentSectionsServices | ComponentSectionsServicesHomepageSection | ComponentSectionsSortingGuide | ComponentSectionsSortingGuideAccordions | ComponentSectionsTable | ComponentSectionsVacancies | ComponentSectionsWasteCollectionDays | ComponentSectionsWasteSortingCards | ComponentSectionsWorkshops | ComponentSharedMetaSocial | ComponentSharedSeo | ComponentSidebarsContactsSidebar | ComponentSidebarsEmptySidebar | Contact | Document | DocumentCategory | Faq | FaqCategory | Footer | Form | Homepage | I18NLocale | Menu | Navigation | OpeningTime | Page | Service | ServiceCategory | Tag | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | WasteCollectionDay | Workshop

type Homepage {
  articlesSection: ComponentSectionsArticlesHomepageSection
  createdAt: DateTime
  heroSection: ComponentSectionsHeroHomepageSection
  koloSection: ComponentSectionsKoloHomepageSection
  locale: String
  localizations: HomepageRelationResponseCollection
  servicesSection: ComponentSectionsServicesHomepageSection
  updatedAt: DateTime
}

type HomepageEntity {
  attributes: Homepage
  id: ID
}

type HomepageEntityResponse {
  data: HomepageEntity
}

type HomepageEntityResponseCollection {
  data: [HomepageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomepageFiltersInput {
  and: [HomepageFiltersInput]
  articlesSection: ComponentSectionsArticlesHomepageSectionFiltersInput
  createdAt: DateTimeFilterInput
  heroSection: ComponentSectionsHeroHomepageSectionFiltersInput
  koloSection: ComponentSectionsKoloHomepageSectionFiltersInput
  locale: StringFilterInput
  localizations: HomepageFiltersInput
  not: HomepageFiltersInput
  or: [HomepageFiltersInput]
  servicesSection: ComponentSectionsServicesHomepageSectionFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomepageInput {
  articlesSection: ComponentSectionsArticlesHomepageSectionInput
  heroSection: ComponentSectionsHeroHomepageSectionInput
  koloSection: ComponentSectionsKoloHomepageSectionInput
  servicesSection: ComponentSectionsServicesHomepageSectionInput
}

type HomepageRelationResponseCollection {
  data: [HomepageEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Menu {
  createdAt: DateTime
  locale: String
  localizations: MenuRelationResponseCollection
  menuHeader: ComponentItemsMenuHeader
  menuItems(filters: ComponentMenuMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuMenuItem]
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: MenuFiltersInput
  menuHeader: ComponentItemsMenuHeaderFiltersInput
  menuItems: ComponentMenuMenuItemFiltersInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  menuHeader: ComponentItemsMenuHeaderInput
  menuItems: [ComponentMenuMenuItemInput]
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createArticle(data: ArticleInput!, locale: I18NLocaleCode): ArticleEntityResponse
  createArticleCategory(data: ArticleCategoryInput!, locale: I18NLocaleCode): ArticleCategoryEntityResponse
  createArticleCategoryLocalization(data: ArticleCategoryInput, id: ID, locale: I18NLocaleCode): ArticleCategoryEntityResponse
  createArticleLocalization(data: ArticleInput, id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  createBranch(data: BranchInput!, locale: I18NLocaleCode): BranchEntityResponse
  createBranchLocalization(data: BranchInput, id: ID, locale: I18NLocaleCode): BranchEntityResponse
  createContact(data: ContactInput!): ContactEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createDocumentCategory(data: DocumentCategoryInput!, locale: I18NLocaleCode): DocumentCategoryEntityResponse
  createDocumentCategoryLocalization(data: DocumentCategoryInput, id: ID, locale: I18NLocaleCode): DocumentCategoryEntityResponse
  createFaq(data: FaqInput!, locale: I18NLocaleCode): FaqEntityResponse
  createFaqCategory(data: FaqCategoryInput!, locale: I18NLocaleCode): FaqCategoryEntityResponse
  createFaqCategoryLocalization(data: FaqCategoryInput, id: ID, locale: I18NLocaleCode): FaqCategoryEntityResponse
  createFaqLocalization(data: FaqInput, id: ID, locale: I18NLocaleCode): FaqEntityResponse
  createFooterLocalization(data: FooterInput, id: ID, locale: I18NLocaleCode): FooterEntityResponse
  createForm(data: FormInput!): FormEntityResponse
  createHomepageLocalization(data: HomepageInput, id: ID, locale: I18NLocaleCode): HomepageEntityResponse
  createMenuLocalization(data: MenuInput, id: ID, locale: I18NLocaleCode): MenuEntityResponse
  createNavigationLocalization(data: NavigationInput, id: ID, locale: I18NLocaleCode): NavigationEntityResponse
  createOpeningTime(data: OpeningTimeInput!): OpeningTimeEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createService(data: ServiceInput!, locale: I18NLocaleCode): ServiceEntityResponse
  createServiceCategory(data: ServiceCategoryInput!, locale: I18NLocaleCode): ServiceCategoryEntityResponse
  createServiceCategoryLocalization(data: ServiceCategoryInput, id: ID, locale: I18NLocaleCode): ServiceCategoryEntityResponse
  createServiceLocalization(data: ServiceInput, id: ID, locale: I18NLocaleCode): ServiceEntityResponse
  createTag(data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  createTagLocalization(data: TagInput, id: ID, locale: I18NLocaleCode): TagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createWasteCollectionDay(data: WasteCollectionDayInput!): WasteCollectionDayEntityResponse
  createWorkshop(data: WorkshopInput!): WorkshopEntityResponse
  deleteArticle(id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  deleteArticleCategory(id: ID!, locale: I18NLocaleCode): ArticleCategoryEntityResponse
  deleteBranch(id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  deleteContact(id: ID!): ContactEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteDocumentCategory(id: ID!, locale: I18NLocaleCode): DocumentCategoryEntityResponse
  deleteFaq(id: ID!, locale: I18NLocaleCode): FaqEntityResponse
  deleteFaqCategory(id: ID!, locale: I18NLocaleCode): FaqCategoryEntityResponse
  deleteFooter(locale: I18NLocaleCode): FooterEntityResponse
  deleteForm(id: ID!): FormEntityResponse
  deleteHomepage(locale: I18NLocaleCode): HomepageEntityResponse
  deleteMenu(locale: I18NLocaleCode): MenuEntityResponse
  deleteNavigation(locale: I18NLocaleCode): NavigationEntityResponse
  deleteOpeningTime(id: ID!): OpeningTimeEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deleteService(id: ID!, locale: I18NLocaleCode): ServiceEntityResponse
  deleteServiceCategory(id: ID!, locale: I18NLocaleCode): ServiceCategoryEntityResponse
  deleteTag(id: ID!, locale: I18NLocaleCode): TagEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteWasteCollectionDay(id: ID!): WasteCollectionDayEntityResponse
  deleteWorkshop(id: ID!): WorkshopEntityResponse

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateArticle(data: ArticleInput!, id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  updateArticleCategory(data: ArticleCategoryInput!, id: ID!, locale: I18NLocaleCode): ArticleCategoryEntityResponse
  updateBranch(data: BranchInput!, id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  updateContact(data: ContactInput!, id: ID!): ContactEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateDocumentCategory(data: DocumentCategoryInput!, id: ID!, locale: I18NLocaleCode): DocumentCategoryEntityResponse
  updateFaq(data: FaqInput!, id: ID!, locale: I18NLocaleCode): FaqEntityResponse
  updateFaqCategory(data: FaqCategoryInput!, id: ID!, locale: I18NLocaleCode): FaqCategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateFooter(data: FooterInput!, locale: I18NLocaleCode): FooterEntityResponse
  updateForm(data: FormInput!, id: ID!): FormEntityResponse
  updateHomepage(data: HomepageInput!, locale: I18NLocaleCode): HomepageEntityResponse
  updateMenu(data: MenuInput!, locale: I18NLocaleCode): MenuEntityResponse
  updateNavigation(data: NavigationInput!, locale: I18NLocaleCode): NavigationEntityResponse
  updateOpeningTime(data: OpeningTimeInput!, id: ID!): OpeningTimeEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updateService(data: ServiceInput!, id: ID!, locale: I18NLocaleCode): ServiceEntityResponse
  updateServiceCategory(data: ServiceCategoryInput!, id: ID!, locale: I18NLocaleCode): ServiceCategoryEntityResponse
  updateTag(data: TagInput!, id: ID!, locale: I18NLocaleCode): TagEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateWasteCollectionDay(data: WasteCollectionDayInput!, id: ID!): WasteCollectionDayEntityResponse
  updateWorkshop(data: WorkshopInput!, id: ID!): WorkshopEntityResponse
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Navigation {
  articlesParentPage: PageEntityResponse
  createdAt: DateTime
  documentsParentPage: PageEntityResponse
  faqCategoriesParentPage: PageEntityResponse
  locale: String
  localizations: NavigationRelationResponseCollection
  servicesParentPage: PageEntityResponse
  updatedAt: DateTime
  workshopsParentPage: PageEntityResponse
}

type NavigationEntity {
  attributes: Navigation
  id: ID
}

type NavigationEntityResponse {
  data: NavigationEntity
}

type NavigationEntityResponseCollection {
  data: [NavigationEntity!]!
  meta: ResponseCollectionMeta!
}

input NavigationFiltersInput {
  and: [NavigationFiltersInput]
  articlesParentPage: PageFiltersInput
  createdAt: DateTimeFilterInput
  documentsParentPage: PageFiltersInput
  faqCategoriesParentPage: PageFiltersInput
  locale: StringFilterInput
  localizations: NavigationFiltersInput
  not: NavigationFiltersInput
  or: [NavigationFiltersInput]
  servicesParentPage: PageFiltersInput
  updatedAt: DateTimeFilterInput
  workshopsParentPage: PageFiltersInput
}

input NavigationInput {
  articlesParentPage: ID
  documentsParentPage: ID
  faqCategoriesParentPage: ID
  servicesParentPage: ID
  workshopsParentPage: ID
}

type NavigationRelationResponseCollection {
  data: [NavigationEntity!]!
}

type OpeningTime {
  branches(filters: BranchFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchRelationResponseCollection
  createdAt: DateTime
  openingHours(filters: ComponentItemsOpeningHoursItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsOpeningHoursItem]
  updatedAt: DateTime
}

type OpeningTimeEntity {
  attributes: OpeningTime
  id: ID
}

type OpeningTimeEntityResponse {
  data: OpeningTimeEntity
}

type OpeningTimeEntityResponseCollection {
  data: [OpeningTimeEntity!]!
  meta: ResponseCollectionMeta!
}

input OpeningTimeFiltersInput {
  and: [OpeningTimeFiltersInput]
  branches: BranchFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  internalName: StringFilterInput
  not: OpeningTimeFiltersInput
  openingHours: ComponentItemsOpeningHoursItemFiltersInput
  or: [OpeningTimeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input OpeningTimeInput {
  branches: [ID]
  internalName: String
  openingHours: [ComponentItemsOpeningHoursItemInput]
}

type OpeningTimeRelationResponseCollection {
  data: [OpeningTimeEntity!]!
}

type Page {
  alias: String
  branch: BranchEntityResponse
  childPages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  createdAt: DateTime
  header: [PageHeaderDynamicZone]
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  parentPage: PageEntityResponse
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZone]
  seo: ComponentSharedSeo
  sidebar: [PageSidebarDynamicZone]
  slug: String!
  title: String!
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  alias: StringFilterInput
  and: [PageFiltersInput]
  branch: BranchFiltersInput
  childPages: PageFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  parentPage: PageFiltersInput
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentSharedSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

union PageHeaderDynamicZone = ComponentHeaderSectionsBranchMap | ComponentHeaderSectionsCareers | ComponentHeaderSectionsFeaturedNews | ComponentHeaderSectionsGallery | ComponentHeaderSectionsImage | ComponentHeaderSectionsPickupDay | ComponentHeaderSectionsSideImage | Error

scalar PageHeaderDynamicZoneInput

input PageInput {
  alias: String
  branch: ID
  childPages: [ID]
  header: [PageHeaderDynamicZoneInput!]
  parentPage: ID
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZoneInput!]
  seo: ComponentSharedSeoInput
  sidebar: [PageSidebarDynamicZoneInput!]
  slug: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

union PageSectionsDynamicZone = ComponentSectionsArticles | ComponentSectionsBanner | ComponentSectionsBoardMembers | ComponentSectionsBranches | ComponentSectionsCardSlider | ComponentSectionsCardsList | ComponentSectionsColumns | ComponentSectionsColumnsList | ComponentSectionsContacts | ComponentSectionsDivider | ComponentSectionsDocuments | ComponentSectionsFaq | ComponentSectionsFaqCategories | ComponentSectionsGlobalSearch | ComponentSectionsImageAndText | ComponentSectionsImageAndTextOverlapped | ComponentSectionsOpeningTimes | ComponentSectionsOrderedCards | ComponentSectionsRichtext | ComponentSectionsServices | ComponentSectionsSortingGuide | ComponentSectionsSortingGuideAccordions | ComponentSectionsTable | ComponentSectionsVacancies | ComponentSectionsWasteCollectionDays | ComponentSectionsWasteSortingCards | ComponentSectionsWorkshops | Error

scalar PageSectionsDynamicZoneInput

union PageSidebarDynamicZone = ComponentSidebarsContactsSidebar | ComponentSidebarsEmptySidebar | Error

scalar PageSidebarDynamicZoneInput

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  article(id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  articleCategories(filters: ArticleCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleCategoryEntityResponseCollection
  articleCategory(id: ID, locale: I18NLocaleCode): ArticleCategoryEntityResponse
  articles(filters: ArticleFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
  branch(id: ID, locale: I18NLocaleCode): BranchEntityResponse
  branches(filters: BranchFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BranchEntityResponseCollection
  contact(id: ID): ContactEntityResponse
  contacts(filters: ContactFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContactEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documentCategories(filters: DocumentCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentCategoryEntityResponseCollection
  documentCategory(id: ID, locale: I18NLocaleCode): DocumentCategoryEntityResponse
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentEntityResponseCollection
  faq(id: ID, locale: I18NLocaleCode): FaqEntityResponse
  faqCategories(filters: FaqCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqCategoryEntityResponseCollection
  faqCategory(id: ID, locale: I18NLocaleCode): FaqCategoryEntityResponse
  faqs(filters: FaqFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FaqEntityResponseCollection
  footer(locale: I18NLocaleCode): FooterEntityResponse
  form(id: ID): FormEntityResponse
  forms(filters: FormFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FormEntityResponseCollection
  homepage(locale: I18NLocaleCode): HomepageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menu(locale: I18NLocaleCode): MenuEntityResponse
  navigation(locale: I18NLocaleCode): NavigationEntityResponse
  openingTime(id: ID): OpeningTimeEntityResponse
  openingTimes(filters: OpeningTimeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OpeningTimeEntityResponseCollection
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  service(id: ID, locale: I18NLocaleCode): ServiceEntityResponse
  serviceCategories(filters: ServiceCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceCategoryEntityResponseCollection
  serviceCategory(id: ID, locale: I18NLocaleCode): ServiceCategoryEntityResponse
  services(filters: ServiceFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceEntityResponseCollection
  tag(id: ID, locale: I18NLocaleCode): TagEntityResponse
  tags(filters: TagFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  wasteCollectionDay(id: ID): WasteCollectionDayEntityResponse
  wasteCollectionDays(filters: WasteCollectionDayFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): WasteCollectionDayEntityResponseCollection
  workshop(id: ID): WorkshopEntityResponse
  workshops(filters: WorkshopFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): WorkshopEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Service {
  createdAt: DateTime
  image: UploadFileEntityResponse
  locale: String
  localizations(filters: ServiceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceRelationResponseCollection
  publishedAt: DateTime
  sections: [ServiceSectionsDynamicZone]
  seo: ComponentSharedSeo
  serviceCategories(filters: ServiceCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceCategoryRelationResponseCollection
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ServiceCategory {
  categoryColor: ENUM_SERVICECATEGORY_CATEGORYCOLOR!
  createdAt: DateTime
  locale: String
  localizations(filters: ServiceCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceCategoryRelationResponseCollection
  publishedAt: DateTime
  services(filters: ServiceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceRelationResponseCollection
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ServiceCategoryEntity {
  attributes: ServiceCategory
  id: ID
}

type ServiceCategoryEntityResponse {
  data: ServiceCategoryEntity
}

type ServiceCategoryEntityResponseCollection {
  data: [ServiceCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input ServiceCategoryFiltersInput {
  and: [ServiceCategoryFiltersInput]
  categoryColor: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ServiceCategoryFiltersInput
  not: ServiceCategoryFiltersInput
  or: [ServiceCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  services: ServiceFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ServiceCategoryInput {
  categoryColor: ENUM_SERVICECATEGORY_CATEGORYCOLOR
  publishedAt: DateTime
  services: [ID]
  slug: String
  title: String
}

type ServiceCategoryRelationResponseCollection {
  data: [ServiceCategoryEntity!]!
}

type ServiceEntity {
  attributes: Service
  id: ID
}

type ServiceEntityResponse {
  data: ServiceEntity
}

type ServiceEntityResponseCollection {
  data: [ServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input ServiceFiltersInput {
  and: [ServiceFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ServiceFiltersInput
  not: ServiceFiltersInput
  or: [ServiceFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: ComponentSharedSeoFiltersInput
  serviceCategories: ServiceCategoryFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ServiceInput {
  image: ID
  publishedAt: DateTime
  sections: [ServiceSectionsDynamicZoneInput!]
  seo: ComponentSharedSeoInput
  serviceCategories: [ID]
  slug: String
  title: String
}

type ServiceRelationResponseCollection {
  data: [ServiceEntity!]!
}

union ServiceSectionsDynamicZone = ComponentSectionsCardsList | ComponentSectionsDocuments | ComponentSectionsFaq | ComponentSectionsFormCtaBanner | ComponentSectionsRichtext | Error

scalar ServiceSectionsDynamicZoneInput

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: TagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagRelationResponseCollection
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: TagFiltersInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  articles: [ID]
  publishedAt: DateTime
  slug: String
  title: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  picture: UploadFileEntityResponse
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  picture: ID
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type WasteCollectionDay {
  address: String
  collectionDates: String
  createdAt: DateTime
  evenWeek: String
  note: String
  oddWeek: String
  registrationNumber: String
  type: String
  updatedAt: DateTime
  validity: String
}

type WasteCollectionDayEntity {
  attributes: WasteCollectionDay
  id: ID
}

type WasteCollectionDayEntityResponse {
  data: WasteCollectionDayEntity
}

type WasteCollectionDayEntityResponseCollection {
  data: [WasteCollectionDayEntity!]!
  meta: ResponseCollectionMeta!
}

input WasteCollectionDayFiltersInput {
  address: StringFilterInput
  and: [WasteCollectionDayFiltersInput]
  collectionDates: StringFilterInput
  createdAt: DateTimeFilterInput
  evenWeek: StringFilterInput
  id: IDFilterInput
  importId: StringFilterInput
  not: WasteCollectionDayFiltersInput
  note: StringFilterInput
  oddWeek: StringFilterInput
  or: [WasteCollectionDayFiltersInput]
  registrationNumber: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  validity: StringFilterInput
}

input WasteCollectionDayInput {
  address: String
  collectionDates: String
  evenWeek: String
  importId: String
  note: String
  oddWeek: String
  registrationNumber: String
  type: String
  validity: String
}

type WasteCollectionDayRelationResponseCollection {
  data: [WasteCollectionDayEntity!]!
}

type Workshop {
  createdAt: DateTime
  dates(filters: ComponentItemsWorkshopDateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentItemsWorkshopDate]
  publishedAt: DateTime
  sections: [WorkshopSectionsDynamicZone]
  slug: String!
  title: String!
  updatedAt: DateTime
}

type WorkshopEntity {
  attributes: Workshop
  id: ID
}

type WorkshopEntityResponse {
  data: WorkshopEntity
}

type WorkshopEntityResponseCollection {
  data: [WorkshopEntity!]!
  meta: ResponseCollectionMeta!
}

input WorkshopFiltersInput {
  and: [WorkshopFiltersInput]
  createdAt: DateTimeFilterInput
  dates: ComponentItemsWorkshopDateFiltersInput
  id: IDFilterInput
  not: WorkshopFiltersInput
  or: [WorkshopFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input WorkshopInput {
  dates: [ComponentItemsWorkshopDateInput]
  publishedAt: DateTime
  sections: [WorkshopSectionsDynamicZoneInput!]
  slug: String
  title: String
}

type WorkshopRelationResponseCollection {
  data: [WorkshopEntity!]!
}

union WorkshopSectionsDynamicZone = ComponentSectionsDocuments | ComponentSectionsFaq | ComponentSectionsRichtext | Error

scalar WorkshopSectionsDynamicZoneInput
